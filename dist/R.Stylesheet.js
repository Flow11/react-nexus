"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");

  var Stylesheet = function Stylesheet() {
    this._rules = [];
  };

  _.extend(Stylesheet.prototype, /** @lends R.Stylesheet.prototype */{
    _isStylesheet_: true,
    registerRule: function registerRule(selector, style) {
      R.Debug.dev(function () {
        assert(_.isPlainObject(style), "R.Stylesheet.registerClassName(...).style: expecting Object.");
      });
      this._rules.push({
        selector: selector,
        style: style });
    },
    getProcessedCSS: function getProcessedCSS() {
      return R.Style.applyAllProcessors(_.map(this._rules, function (rule) {
        return rule.selector + " {\n" + R.Style.getCSSFromReactStyle(rule.style, "  ") + "}\n";
      }).join("\n"));
    } });

  return Stylesheet;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLlN0eWxlc2hlZXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDekIsTUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFL0IsTUFBSSxVQUFVLEdBQUcsU0FBUyxVQUFVLEdBQUc7QUFDbkMsUUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7R0FDcEIsQ0FBQzs7QUFFRixHQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLHNDQUF1QztBQUNoRSxrQkFBYyxFQUFFLElBQUk7QUFDcEIsZ0JBQVksRUFBRSxTQUFTLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFO0FBQ2pELE9BQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVc7QUFDbkIsY0FBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsOERBQThELENBQUMsQ0FBQztPQUNsRyxDQUFDLENBQUM7QUFDSCxVQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNiLGdCQUFRLEVBQUUsUUFBUTtBQUNsQixhQUFLLEVBQUUsS0FBSyxFQUNmLENBQUMsQ0FBQztLQUNOO0FBQ0QsbUJBQWUsRUFBRSxTQUFTLGVBQWUsR0FBRztBQUN4QyxhQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQ2hFLGVBQU8sSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztPQUMxRixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbEIsRUFDSixDQUFDLENBQUM7O0FBRUgsU0FBTyxVQUFVLENBQUMiLCJmaWxlIjoiUi5TdHlsZXNoZWV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcbiAgICB2YXIgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG4gICAgdmFyIGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG5cbiAgICB2YXIgU3R5bGVzaGVldCA9IGZ1bmN0aW9uIFN0eWxlc2hlZXQoKSB7XG4gICAgICAgIHRoaXMuX3J1bGVzID0gW107XG4gICAgfTtcblxuICAgIF8uZXh0ZW5kKFN0eWxlc2hlZXQucHJvdG90eXBlLCAvKiogQGxlbmRzIFIuU3R5bGVzaGVldC5wcm90b3R5cGUgKi8ge1xuICAgICAgICBfaXNTdHlsZXNoZWV0XzogdHJ1ZSxcbiAgICAgICAgcmVnaXN0ZXJSdWxlOiBmdW5jdGlvbiByZWdpc3RlclJ1bGUoc2VsZWN0b3IsIHN0eWxlKSB7XG4gICAgICAgICAgICBSLkRlYnVnLmRldihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc1BsYWluT2JqZWN0KHN0eWxlKSwgXCJSLlN0eWxlc2hlZXQucmVnaXN0ZXJDbGFzc05hbWUoLi4uKS5zdHlsZTogZXhwZWN0aW5nIE9iamVjdC5cIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuX3J1bGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcbiAgICAgICAgICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0UHJvY2Vzc2VkQ1NTOiBmdW5jdGlvbiBnZXRQcm9jZXNzZWRDU1MoKSB7XG4gICAgICAgICAgICByZXR1cm4gUi5TdHlsZS5hcHBseUFsbFByb2Nlc3NvcnMoXy5tYXAodGhpcy5fcnVsZXMsIGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvciArIFwiIHtcXG5cIiArIFIuU3R5bGUuZ2V0Q1NTRnJvbVJlYWN0U3R5bGUocnVsZS5zdHlsZSwgXCIgIFwiKSArIFwifVxcblwiO1xuICAgICAgICAgICAgfSkuam9pbihcIlxcblwiKSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gU3R5bGVzaGVldDtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");

  var Stylesheet = function Stylesheet() {
    this._rules = [];
  };

  _.extend(Stylesheet.prototype, /** @lends R.Stylesheet.prototype */{
    _isStylesheet_: true,
    registerRule: function registerRule(selector, style) {
      R.Debug.dev(function () {
        assert(_.isPlainObject(style), "R.Stylesheet.registerClassName(...).style: expecting Object.");
      });
      this._rules.push({
        selector: selector,
        style: style });
    },
    getProcessedCSS: function getProcessedCSS() {
      return R.Style.applyAllProcessors(_.map(this._rules, function (rule) {
        return rule.selector + " {\n" + R.Style.getCSSFromReactStyle(rule.style, "  ") + "}\n";
      }).join("\n"));
    } });

  return Stylesheet;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLlN0eWxlc2hlZXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDekIsTUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFL0IsTUFBSSxVQUFVLEdBQUcsU0FBUyxVQUFVLEdBQUc7QUFDbkMsUUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7R0FDcEIsQ0FBQzs7QUFFRixHQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxTQUFTLHNDQUF1QztBQUNoRSxrQkFBYyxFQUFFLElBQUk7QUFDcEIsZ0JBQVksRUFBRSxTQUFTLFlBQVksQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFO0FBQ2pELE9BQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVc7QUFDbkIsY0FBTSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUUsOERBQThELENBQUMsQ0FBQztPQUNsRyxDQUFDLENBQUM7QUFDSCxVQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNiLGdCQUFRLEVBQUUsUUFBUTtBQUNsQixhQUFLLEVBQUUsS0FBSyxFQUNmLENBQUMsQ0FBQztLQUNOO0FBQ0QsbUJBQWUsRUFBRSxTQUFTLGVBQWUsR0FBRztBQUN4QyxhQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQ2hFLGVBQU8sSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztPQUMxRixDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDbEIsRUFDSixDQUFDLENBQUM7O0FBRUgsU0FBTyxVQUFVLENBQUMiLCJmaWxlIjoiUi5TdHlsZXNoZWV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcclxuICAgIHZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxuICAgIHZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xyXG5cclxuICAgIHZhciBTdHlsZXNoZWV0ID0gZnVuY3Rpb24gU3R5bGVzaGVldCgpIHtcclxuICAgICAgICB0aGlzLl9ydWxlcyA9IFtdO1xyXG4gICAgfTtcclxuXHJcbiAgICBfLmV4dGVuZChTdHlsZXNoZWV0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBSLlN0eWxlc2hlZXQucHJvdG90eXBlICovIHtcclxuICAgICAgICBfaXNTdHlsZXNoZWV0XzogdHJ1ZSxcclxuICAgICAgICByZWdpc3RlclJ1bGU6IGZ1bmN0aW9uIHJlZ2lzdGVyUnVsZShzZWxlY3Rvciwgc3R5bGUpIHtcclxuICAgICAgICAgICAgUi5EZWJ1Zy5kZXYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc1BsYWluT2JqZWN0KHN0eWxlKSwgXCJSLlN0eWxlc2hlZXQucmVnaXN0ZXJDbGFzc05hbWUoLi4uKS5zdHlsZTogZXhwZWN0aW5nIE9iamVjdC5cIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLl9ydWxlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvcixcclxuICAgICAgICAgICAgICAgIHN0eWxlOiBzdHlsZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRQcm9jZXNzZWRDU1M6IGZ1bmN0aW9uIGdldFByb2Nlc3NlZENTUygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFIuU3R5bGUuYXBwbHlBbGxQcm9jZXNzb3JzKF8ubWFwKHRoaXMuX3J1bGVzLCBmdW5jdGlvbihydWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS5zZWxlY3RvciArIFwiIHtcXG5cIiArIFIuU3R5bGUuZ2V0Q1NTRnJvbVJlYWN0U3R5bGUocnVsZS5zdHlsZSwgXCIgIFwiKSArIFwifVxcblwiO1xyXG4gICAgICAgICAgICB9KS5qb2luKFwiXFxuXCIpKTtcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIFN0eWxlc2hlZXQ7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var React = R.React;

  var _vanillaReactChildren = React.Children;

  var _patchedReactChildren = _.extend({}, React.Children, {
    getChildrenList: function (component) {
      if (null === component || !component.props || !component.props.children) {
        return [];
      }
      return React.Children.map(component.props.children, function (child) {
        return child;
      });
    },

    getDescendantsList: function (component) {
      var children = React.getChildrenList(component);
      var descendants = [];
      children.forEach(function (child) {
        descendants.push(child);
        React.Children.getDescendantsList(child).forEach(function (childDescendant) {
          return descendants.push(childDescendant);
        });
      });
      return descendants;
    },

    mapDescendants: function (component, fn) {
      return React.Children.getDescendantsList(component).map(fn);
    },

    mapTree: function (component, fn) {
      var tree = React.Children.getDescendantsList(component, fn);
      tree.unshift(component);
      return tree.map(fn);
    },

    restoreChildren: function () {
      _.extend(React, { Children: _vanillaReactChildren });
      return _vanillaReactChildren;
    },

    patchChildren: function () {
      _.extend(React, { Children: _patchedReactChildren });
      return _patchedReactChildren;
    },

    transformDescendants: function (component, fn) {
      var children = React.Children.getDescendantsList(component);
      if (children.length === 0) {
        return component;
      }
      if (component.props) {
        (function () {
          var transformChild = function (child) {
            return React.Children.transformTree(child, fn);
          };
          component.props.children = React.Children.mapDescendants(component, transformChild);
        })();
      }
      return component;
    },

    transformTree: function (component, fn) {
      return React.Children.transformDescendants(fn(component), fn);
    } });

  return _patchedReactChildren.patchChildren();
};
//# sourceMappingURL=data:application/json;base64,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Q0FBQyxLQUFLLEVBQUU7O0FBQ2xCLGNBQUksY0FBYyxHQUFHLFVBQUMsS0FBSzttQkFBSyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1dBQUEsQ0FBQztBQUN4RSxtQkFBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDOztPQUNyRjtBQUNELGFBQU8sU0FBUyxDQUFDO0tBQ2xCOztBQUVELGlCQUFhLEVBQUEsVUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQzNCLGFBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDL0QsRUFFRixDQUFDLENBQUM7O0FBRUgsU0FBTyxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5QyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDaGlsZHJlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUikge1xyXG4gIGNvbnN0IF8gPSBSLl87XHJcbiAgY29uc3QgUmVhY3QgPSBSLlJlYWN0O1xyXG5cclxuICBjb25zdCBfdmFuaWxsYVJlYWN0Q2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbjtcclxuXHJcbiAgY29uc3QgX3BhdGNoZWRSZWFjdENoaWxkcmVuID0gXy5leHRlbmQoe30sIFJlYWN0LkNoaWxkcmVuLCB7XHJcbiAgICBnZXRDaGlsZHJlbkxpc3QoY29tcG9uZW50KSB7XHJcbiAgICAgIGlmKG51bGwgPT09IGNvbXBvbmVudCB8fCAhY29tcG9uZW50LnByb3BzIHx8ICFjb21wb25lbnQucHJvcHMuY2hpbGRyZW4pIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLm1hcChjb21wb25lbnQucHJvcHMuY2hpbGRyZW4sIChjaGlsZCkgPT4gY2hpbGQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXREZXNjZW5kYW50c0xpc3QoY29tcG9uZW50KSB7XHJcbiAgICAgIGxldCBjaGlsZHJlbiA9IFJlYWN0LmdldENoaWxkcmVuTGlzdChjb21wb25lbnQpO1xyXG4gICAgICBsZXQgZGVzY2VuZGFudHMgPSBbXTtcclxuICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgICAgICBkZXNjZW5kYW50cy5wdXNoKGNoaWxkKTtcclxuICAgICAgICBSZWFjdC5DaGlsZHJlbi5nZXREZXNjZW5kYW50c0xpc3QoY2hpbGQpLmZvckVhY2goKGNoaWxkRGVzY2VuZGFudCkgPT4gZGVzY2VuZGFudHMucHVzaChjaGlsZERlc2NlbmRhbnQpKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBkZXNjZW5kYW50cztcclxuICAgIH0sXHJcblxyXG4gICAgbWFwRGVzY2VuZGFudHMoY29tcG9uZW50LCBmbikge1xyXG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uZ2V0RGVzY2VuZGFudHNMaXN0KGNvbXBvbmVudCkubWFwKGZuKTtcclxuICAgIH0sXHJcblxyXG4gICAgbWFwVHJlZShjb21wb25lbnQsIGZuKSB7XHJcbiAgICAgIGxldCB0cmVlID0gUmVhY3QuQ2hpbGRyZW4uZ2V0RGVzY2VuZGFudHNMaXN0KGNvbXBvbmVudCwgZm4pO1xyXG4gICAgICB0cmVlLnVuc2hpZnQoY29tcG9uZW50KTtcclxuICAgICAgcmV0dXJuIHRyZWUubWFwKGZuKTtcclxuICAgIH0sXHJcblxyXG4gICAgcmVzdG9yZUNoaWxkcmVuKCkge1xyXG4gICAgICBfLmV4dGVuZChSZWFjdCwgeyBDaGlsZHJlbjogX3ZhbmlsbGFSZWFjdENoaWxkcmVuIH0pO1xyXG4gICAgICByZXR1cm4gX3ZhbmlsbGFSZWFjdENoaWxkcmVuO1xyXG4gICAgfSxcclxuXHJcbiAgICBwYXRjaENoaWxkcmVuKCkge1xyXG4gICAgICBfLmV4dGVuZChSZWFjdCwgeyBDaGlsZHJlbjogX3BhdGNoZWRSZWFjdENoaWxkcmVuIH0pO1xyXG4gICAgICByZXR1cm4gX3BhdGNoZWRSZWFjdENoaWxkcmVuO1xyXG4gICAgfSxcclxuXHJcbiAgICB0cmFuc2Zvcm1EZXNjZW5kYW50cyhjb21wb25lbnQsIGZuKSB7XHJcbiAgICAgIGxldCBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLmdldERlc2NlbmRhbnRzTGlzdChjb21wb25lbnQpO1xyXG4gICAgICBpZihjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xyXG4gICAgICB9XHJcbiAgICAgIGlmKGNvbXBvbmVudC5wcm9wcykge1xyXG4gICAgICAgIGxldCB0cmFuc2Zvcm1DaGlsZCA9IChjaGlsZCkgPT4gUmVhY3QuQ2hpbGRyZW4udHJhbnNmb3JtVHJlZShjaGlsZCwgZm4pO1xyXG4gICAgICAgIGNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcERlc2NlbmRhbnRzKGNvbXBvbmVudCwgdHJhbnNmb3JtQ2hpbGQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjb21wb25lbnQ7XHJcbiAgICB9LFxyXG5cclxuICAgIHRyYW5zZm9ybVRyZWUoY29tcG9uZW50LCBmbikge1xyXG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udHJhbnNmb3JtRGVzY2VuZGFudHMoZm4oY29tcG9uZW50KSwgZm4pO1xyXG4gICAgfSxcclxuXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBfcGF0Y2hlZFJlYWN0Q2hpbGRyZW4ucGF0Y2hDaGlsZHJlbigpO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
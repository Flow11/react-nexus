"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var React = R.React;

  var _vanillaReactChildren = React.Children;

  var _patchedReactChildren = _.extend({}, React.Children, {
    getChildrenList: function (component) {
      if (null === component || !component.props || !component.props.children) {
        return [];
      }
      return React.Children.map(component.props.children, function (child) {
        return child;
      });
    },

    getDescendantsList: function (component) {
      var children = React.getChildrenList(component);
      var descendants = [];
      children.forEach(function (child) {
        descendants.push(child);
        React.Children.getDescendantsList(child).forEach(function (childDescendant) {
          return descendants.push(childDescendant);
        });
      });
      return descendants;
    },

    mapDescendants: function (component, fn) {
      return React.Children.getDescendantsList(component).map(fn);
    },

    mapTree: function (component, fn) {
      var tree = React.Children.getDescendantsList(component, fn);
      tree.unshift(component);
      return tree.map(fn);
    },

    restoreChildren: function () {
      _.extend(React, { Children: _vanillaReactChildren });
      return _vanillaReactChildren;
    },

    patchChildren: function () {
      _.extend(React, { Children: _patchedReactChildren });
      return _patchedReactChildren;
    },

    transformDescendants: function (component, fn) {
      var children = React.Children.getDescendantsList(component);
      if (children.length === 0) {
        return component;
      }
      if (component.props) {
        (function () {
          var transformChild = function (child) {
            return React.Children.transformTree(child, fn);
          };
          component.props.children = React.Children.mapDescendants(component, transformChild);
        })();
      }
      return component;
    },

    transformTree: function (component, fn) {
      return React.Children.transformDescendants(fn(component), fn);
    } });

  return _patchedReactChildren.patchChildren();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLlJlYWN0Q2hpbGRyZW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFdEIsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDOztBQUU3QyxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDekQsbUJBQWUsRUFBQSxVQUFDLFNBQVMsRUFBRTtBQUN6QixVQUFHLElBQUksS0FBSyxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDdEUsZUFBTyxFQUFFLENBQUM7T0FDWDtBQUNELGFBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBQyxLQUFLO2VBQUssS0FBSztPQUFBLENBQUMsQ0FBQztLQUN2RTs7QUFFRCxzQkFBa0IsRUFBQSxVQUFDLFNBQVMsRUFBRTtBQUM1QixVQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2hELFVBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUNyQixjQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFLO0FBQzFCLG1CQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3hCLGFBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsZUFBZTtpQkFBSyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUFBLENBQUMsQ0FBQztPQUMxRyxDQUFDLENBQUM7QUFDSCxhQUFPLFdBQVcsQ0FBQztLQUNwQjs7QUFFRCxrQkFBYyxFQUFBLFVBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUM1QixhQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQzdEOztBQUVELFdBQU8sRUFBQSxVQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUU7QUFDckIsVUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDNUQsVUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QixhQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDckI7O0FBRUQsbUJBQWUsRUFBQSxZQUFHO0FBQ2hCLE9BQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztBQUNyRCxhQUFPLHFCQUFxQixDQUFDO0tBQzlCOztBQUVELGlCQUFhLEVBQUEsWUFBRztBQUNkLE9BQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsUUFBUSxFQUFFLHFCQUFxQixFQUFFLENBQUMsQ0FBQztBQUNyRCxhQUFPLHFCQUFxQixDQUFDO0tBQzlCOztBQUVELHdCQUFvQixFQUFBLFVBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUNsQyxVQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzVELFVBQUcsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDeEIsZUFBTyxTQUFTLENBQUM7T0FDbEI7QUFDRCxVQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUU7O0FBQ2xCLGNBQUksY0FBYyxHQUFHLFVBQUMsS0FBSzttQkFBSyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1dBQUEsQ0FBQztBQUN4RSxtQkFBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDOztPQUNyRjtBQUNELGFBQU8sU0FBUyxDQUFDO0tBQ2xCOztBQUVELGlCQUFhLEVBQUEsVUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQzNCLGFBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDL0QsRUFFRixDQUFDLENBQUM7O0FBRUgsU0FBTyxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5QyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDaGlsZHJlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XG4gIGNvbnN0IF8gPSBSLl87XG4gIGNvbnN0IHNob3VsZCA9IFIuc2hvdWxkO1xuICBjb25zdCBSZWFjdCA9IFIuUmVhY3Q7XG5cbiAgY29uc3QgX3ZhbmlsbGFSZWFjdENoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW47XG5cbiAgY29uc3QgX3BhdGNoZWRSZWFjdENoaWxkcmVuID0gXy5leHRlbmQoe30sIFJlYWN0LkNoaWxkcmVuLCB7XG4gICAgZ2V0Q2hpbGRyZW5MaXN0KGNvbXBvbmVudCkge1xuICAgICAgaWYobnVsbCA9PT0gY29tcG9uZW50IHx8ICFjb21wb25lbnQucHJvcHMgfHwgIWNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbiwgKGNoaWxkKSA9PiBjaGlsZCk7XG4gICAgfSxcblxuICAgIGdldERlc2NlbmRhbnRzTGlzdChjb21wb25lbnQpIHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IFJlYWN0LmdldENoaWxkcmVuTGlzdChjb21wb25lbnQpO1xuICAgICAgbGV0IGRlc2NlbmRhbnRzID0gW107XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICBkZXNjZW5kYW50cy5wdXNoKGNoaWxkKTtcbiAgICAgICAgUmVhY3QuQ2hpbGRyZW4uZ2V0RGVzY2VuZGFudHNMaXN0KGNoaWxkKS5mb3JFYWNoKChjaGlsZERlc2NlbmRhbnQpID0+IGRlc2NlbmRhbnRzLnB1c2goY2hpbGREZXNjZW5kYW50KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBkZXNjZW5kYW50cztcbiAgICB9LFxuXG4gICAgbWFwRGVzY2VuZGFudHMoY29tcG9uZW50LCBmbikge1xuICAgICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmdldERlc2NlbmRhbnRzTGlzdChjb21wb25lbnQpLm1hcChmbik7XG4gICAgfSxcblxuICAgIG1hcFRyZWUoY29tcG9uZW50LCBmbikge1xuICAgICAgbGV0IHRyZWUgPSBSZWFjdC5DaGlsZHJlbi5nZXREZXNjZW5kYW50c0xpc3QoY29tcG9uZW50LCBmbik7XG4gICAgICB0cmVlLnVuc2hpZnQoY29tcG9uZW50KTtcbiAgICAgIHJldHVybiB0cmVlLm1hcChmbik7XG4gICAgfSxcblxuICAgIHJlc3RvcmVDaGlsZHJlbigpIHtcbiAgICAgIF8uZXh0ZW5kKFJlYWN0LCB7IENoaWxkcmVuOiBfdmFuaWxsYVJlYWN0Q2hpbGRyZW4gfSk7XG4gICAgICByZXR1cm4gX3ZhbmlsbGFSZWFjdENoaWxkcmVuO1xuICAgIH0sXG5cbiAgICBwYXRjaENoaWxkcmVuKCkge1xuICAgICAgXy5leHRlbmQoUmVhY3QsIHsgQ2hpbGRyZW46IF9wYXRjaGVkUmVhY3RDaGlsZHJlbiB9KTtcbiAgICAgIHJldHVybiBfcGF0Y2hlZFJlYWN0Q2hpbGRyZW47XG4gICAgfSxcblxuICAgIHRyYW5zZm9ybURlc2NlbmRhbnRzKGNvbXBvbmVudCwgZm4pIHtcbiAgICAgIGxldCBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLmdldERlc2NlbmRhbnRzTGlzdChjb21wb25lbnQpO1xuICAgICAgaWYoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICB9XG4gICAgICBpZihjb21wb25lbnQucHJvcHMpIHtcbiAgICAgICAgbGV0IHRyYW5zZm9ybUNoaWxkID0gKGNoaWxkKSA9PiBSZWFjdC5DaGlsZHJlbi50cmFuc2Zvcm1UcmVlKGNoaWxkLCBmbik7XG4gICAgICAgIGNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcERlc2NlbmRhbnRzKGNvbXBvbmVudCwgdHJhbnNmb3JtQ2hpbGQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtVHJlZShjb21wb25lbnQsIGZuKSB7XG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udHJhbnNmb3JtRGVzY2VuZGFudHMoZm4oY29tcG9uZW50KSwgZm4pO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgcmV0dXJuIF9wYXRjaGVkUmVhY3RDaGlsZHJlbi5wYXRjaENoaWxkcmVuKCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
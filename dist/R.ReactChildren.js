"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var React = R.React;

  var _vanillaReactChildren = React.Children;

  var _patchedReactChildren = _.extend({}, React.Children, {
    getChildrenList: function (component) {
      if (null === component || !component.props || !component.props.children) {
        return [];
      }
      return React.Children.map(component.props.children, function (child) {
        return child;
      });
    },

    getDescendantsList: function (component) {
      var children = React.Children.getChildrenList(component);
      var descendants = [];
      children.forEach(function (child) {
        descendants.push(child);
        React.Children.getDescendantsList(child).forEach(function (childDescendant) {
          return descendants.push(childDescendant);
        });
      });
      return descendants;
    },

    mapDescendants: function (component, fn) {
      return React.Children.getDescendantsList(component).map(fn);
    },

    mapTree: function (component, fn) {
      var tree = React.Children.getDescendantsList(component, fn);
      tree.unshift(component);
      return tree.map(fn);
    },

    restoreChildren: function () {
      React.Children = _vanillaReactChildren;
      return _vanillaReactChildren;
    },

    patchChildren: function () {
      React.Children = _patchedReactChildren;
      return _patchedReactChildren;
    },

    transformDescendants: function (component, fn) {
      var children = React.Children.getDescendantsList(component);
      if (children.length === 0) {
        return component;
      }
      if (component.props) {
        (function () {
          var transformChild = function (child) {
            return React.Children.transformTree(child, fn);
          };
          component.props.children = React.Children.mapDescendants(component, transformChild);
        })();
      }
      return component;
    },

    transformTree: function (component, fn) {
      return React.Children.transformDescendants(fn(component), fn);
    } });

  return _patchedReactChildren.patchChildren();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlIuUmVhY3RDaGlsZHJlbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLENBQUMsRUFBRTtBQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFdEIsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDOztBQUU3QyxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDekQsbUJBQWUsRUFBQSxVQUFDLFNBQVMsRUFBRTtBQUN6QixVQUFHLElBQUksS0FBSyxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDdEUsZUFBTyxFQUFFLENBQUM7T0FDWDtBQUNELGFBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsVUFBQyxLQUFLO2VBQUssS0FBSztPQUFBLENBQUMsQ0FBQztLQUN2RTs7QUFFRCxzQkFBa0IsRUFBQSxVQUFDLFNBQVMsRUFBRTtBQUM1QixVQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzRCxVQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDdkIsY0FBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBSztBQUMxQixtQkFBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QixhQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGVBQWU7aUJBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7U0FBQSxDQUFDLENBQUM7T0FDMUcsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxXQUFXLENBQUM7S0FDcEI7O0FBRUQsa0JBQWMsRUFBQSxVQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUU7QUFDNUIsYUFBTyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3RDs7QUFFRCxXQUFPLEVBQUEsVUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQ3JCLFVBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzlELFVBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEIsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JCOztBQUVELG1CQUFlLEVBQUEsWUFBRztBQUNoQixXQUFLLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQ3ZDLGFBQU8scUJBQXFCLENBQUM7S0FDOUI7O0FBRUQsaUJBQWEsRUFBQSxZQUFHO0FBQ2QsV0FBSyxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztBQUN2QyxhQUFPLHFCQUFxQixDQUFDO0tBQzlCOztBQUVELHdCQUFvQixFQUFBLFVBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUNsQyxVQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlELFVBQUcsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDeEIsZUFBTyxTQUFTLENBQUM7T0FDbEI7QUFDRCxVQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUU7O0FBQ2xCLGNBQU0sY0FBYyxHQUFHLFVBQUMsS0FBSzttQkFBSyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1dBQUEsQ0FBQztBQUMxRSxtQkFBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDOztPQUNyRjtBQUNELGFBQU8sU0FBUyxDQUFDO0tBQ2xCOztBQUVELGlCQUFhLEVBQUEsVUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQzNCLGFBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDL0QsRUFFRixDQUFDLENBQUM7O0FBRUgsU0FBTyxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5QyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDaGlsZHJlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUikge1xuICBjb25zdCBfID0gUi5fO1xuICBjb25zdCBSZWFjdCA9IFIuUmVhY3Q7XG5cbiAgY29uc3QgX3ZhbmlsbGFSZWFjdENoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW47XG5cbiAgY29uc3QgX3BhdGNoZWRSZWFjdENoaWxkcmVuID0gXy5leHRlbmQoe30sIFJlYWN0LkNoaWxkcmVuLCB7XG4gICAgZ2V0Q2hpbGRyZW5MaXN0KGNvbXBvbmVudCkge1xuICAgICAgaWYobnVsbCA9PT0gY29tcG9uZW50IHx8ICFjb21wb25lbnQucHJvcHMgfHwgIWNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbiwgKGNoaWxkKSA9PiBjaGlsZCk7XG4gICAgfSxcblxuICAgIGdldERlc2NlbmRhbnRzTGlzdChjb21wb25lbnQpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4uZ2V0Q2hpbGRyZW5MaXN0KGNvbXBvbmVudCk7XG4gICAgICBjb25zdCBkZXNjZW5kYW50cyA9IFtdO1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgZGVzY2VuZGFudHMucHVzaChjaGlsZCk7XG4gICAgICAgIFJlYWN0LkNoaWxkcmVuLmdldERlc2NlbmRhbnRzTGlzdChjaGlsZCkuZm9yRWFjaCgoY2hpbGREZXNjZW5kYW50KSA9PiBkZXNjZW5kYW50cy5wdXNoKGNoaWxkRGVzY2VuZGFudCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGVzY2VuZGFudHM7XG4gICAgfSxcblxuICAgIG1hcERlc2NlbmRhbnRzKGNvbXBvbmVudCwgZm4pIHtcbiAgICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5nZXREZXNjZW5kYW50c0xpc3QoY29tcG9uZW50KS5tYXAoZm4pO1xuICAgIH0sXG5cbiAgICBtYXBUcmVlKGNvbXBvbmVudCwgZm4pIHtcbiAgICAgIGNvbnN0IHRyZWUgPSBSZWFjdC5DaGlsZHJlbi5nZXREZXNjZW5kYW50c0xpc3QoY29tcG9uZW50LCBmbik7XG4gICAgICB0cmVlLnVuc2hpZnQoY29tcG9uZW50KTtcbiAgICAgIHJldHVybiB0cmVlLm1hcChmbik7XG4gICAgfSxcblxuICAgIHJlc3RvcmVDaGlsZHJlbigpIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuID0gX3ZhbmlsbGFSZWFjdENoaWxkcmVuO1xuICAgICAgcmV0dXJuIF92YW5pbGxhUmVhY3RDaGlsZHJlbjtcbiAgICB9LFxuXG4gICAgcGF0Y2hDaGlsZHJlbigpIHtcbiAgICAgIFJlYWN0LkNoaWxkcmVuID0gX3BhdGNoZWRSZWFjdENoaWxkcmVuO1xuICAgICAgcmV0dXJuIF9wYXRjaGVkUmVhY3RDaGlsZHJlbjtcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtRGVzY2VuZGFudHMoY29tcG9uZW50LCBmbikge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5nZXREZXNjZW5kYW50c0xpc3QoY29tcG9uZW50KTtcbiAgICAgIGlmKGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgICAgfVxuICAgICAgaWYoY29tcG9uZW50LnByb3BzKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybUNoaWxkID0gKGNoaWxkKSA9PiBSZWFjdC5DaGlsZHJlbi50cmFuc2Zvcm1UcmVlKGNoaWxkLCBmbik7XG4gICAgICAgIGNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLm1hcERlc2NlbmRhbnRzKGNvbXBvbmVudCwgdHJhbnNmb3JtQ2hpbGQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICB9LFxuXG4gICAgdHJhbnNmb3JtVHJlZShjb21wb25lbnQsIGZuKSB7XG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4udHJhbnNmb3JtRGVzY2VuZGFudHMoZm4oY29tcG9uZW50KSwgZm4pO1xuICAgIH0sXG5cbiAgfSk7XG5cbiAgcmV0dXJuIF9wYXRjaGVkUmVhY3RDaGlsZHJlbi5wYXRjaENoaWxkcmVuKCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
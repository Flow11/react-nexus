"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var React = R.React;

  var _vanillaReactChildren = React.Children;

  var _patchedReactChildren = _.extend({}, React.Children, {
    getChildrenList: function (component) {
      if (null === component || !component.props || !component.props.children) {
        return [];
      }
      var children = [];
      React.Children.forEach(component.props.children, function (child) {
        return children.push(child);
      });
      return children;
    },

    getDescendantsList: function (component) {
      var children = React.Children.getChildrenList(component);
      var descendants = [];
      children.forEach(function (child) {
        descendants.push(child);
        React.Children.getDescendantsList(child).forEach(function (childDescendant) {
          return descendants.push(childDescendant);
        });
      });
      return descendants;
    },

    mapDescendants: function (component, fn) {
      return React.Children.getDescendantsList(component).map(fn);
    },

    mapTree: function (component, fn) {
      var tree = React.Children.getDescendantsList(component, fn);
      tree.unshift(component);
      return tree.map(fn);
    },

    restoreChildren: function () {
      React.Children = _vanillaReactChildren;
      return _vanillaReactChildren;
    },

    patchChildren: function () {
      React.Children = _patchedReactChildren;
      return _patchedReactChildren;
    },

    transformDescendants: function (component, fn) {
      var children = React.Children.getDescendantsList(component);
      if (children.length === 0) {
        return component;
      }
      if (component.props) {
        (function () {
          var transformChild = function (child) {
            return React.Children.transformTree(child, fn);
          };
          component.props.children = React.Children.mapDescendants(component, transformChild);
        })();
      }
      return component;
    },

    transformTree: function (component, fn) {
      return React.Children.transformDescendants(fn(component), fn);
    } });

  return _patchedReactChildren.patchChildren();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlIuUmVhY3RDaGlsZHJlbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLENBQUMsRUFBRTtBQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFdEIsTUFBTSxxQkFBcUIsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDOztBQUU3QyxNQUFNLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDekQsbUJBQWUsRUFBQSxVQUFDLFNBQVMsRUFBRTtBQUN6QixVQUFHLElBQUksS0FBSyxTQUFTLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDdEUsZUFBTyxFQUFFLENBQUM7T0FDWDtBQUNELFVBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQztBQUNwQixXQUFLLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxVQUFDLEtBQUs7ZUFBSyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztPQUFBLENBQUMsQ0FBQztBQUNsRixhQUFPLFFBQVEsQ0FBQztLQUNqQjs7QUFFRCxzQkFBa0IsRUFBQSxVQUFDLFNBQVMsRUFBRTtBQUM1QixVQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMzRCxVQUFNLFdBQVcsR0FBRyxFQUFFLENBQUM7QUFDdkIsY0FBUSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUssRUFBSztBQUMxQixtQkFBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QixhQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGVBQWU7aUJBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7U0FBQSxDQUFDLENBQUM7T0FDMUcsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxXQUFXLENBQUM7S0FDcEI7O0FBRUQsa0JBQWMsRUFBQSxVQUFDLFNBQVMsRUFBRSxFQUFFLEVBQUU7QUFDNUIsYUFBTyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUM3RDs7QUFFRCxXQUFPLEVBQUEsVUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQ3JCLFVBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQzlELFVBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDeEIsYUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3JCOztBQUVELG1CQUFlLEVBQUEsWUFBRztBQUNoQixXQUFLLENBQUMsUUFBUSxHQUFHLHFCQUFxQixDQUFDO0FBQ3ZDLGFBQU8scUJBQXFCLENBQUM7S0FDOUI7O0FBRUQsaUJBQWEsRUFBQSxZQUFHO0FBQ2QsV0FBSyxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQztBQUN2QyxhQUFPLHFCQUFxQixDQUFDO0tBQzlCOztBQUVELHdCQUFvQixFQUFBLFVBQUMsU0FBUyxFQUFFLEVBQUUsRUFBRTtBQUNsQyxVQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzlELFVBQUcsUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7QUFDeEIsZUFBTyxTQUFTLENBQUM7T0FDbEI7QUFDRCxVQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUU7O0FBQ2xCLGNBQU0sY0FBYyxHQUFHLFVBQUMsS0FBSzttQkFBSyxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO1dBQUEsQ0FBQztBQUMxRSxtQkFBUyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxFQUFFLGNBQWMsQ0FBQyxDQUFDOztPQUNyRjtBQUNELGFBQU8sU0FBUyxDQUFDO0tBQ2xCOztBQUVELGlCQUFhLEVBQUEsVUFBQyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQzNCLGFBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDL0QsRUFFRixDQUFDLENBQUM7O0FBRUgsU0FBTyxxQkFBcUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztDQUM5QyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDaGlsZHJlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUikge1xuICBjb25zdCBfID0gUi5fO1xuICBjb25zdCBSZWFjdCA9IFIuUmVhY3Q7XG5cbiAgY29uc3QgX3ZhbmlsbGFSZWFjdENoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW47XG5cbiAgY29uc3QgX3BhdGNoZWRSZWFjdENoaWxkcmVuID0gXy5leHRlbmQoe30sIFJlYWN0LkNoaWxkcmVuLCB7XG4gICAgZ2V0Q2hpbGRyZW5MaXN0KGNvbXBvbmVudCkge1xuICAgICAgaWYobnVsbCA9PT0gY29tcG9uZW50IHx8ICFjb21wb25lbnQucHJvcHMgfHwgIWNvbXBvbmVudC5wcm9wcy5jaGlsZHJlbikge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFtdO1xuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjb21wb25lbnQucHJvcHMuY2hpbGRyZW4sIChjaGlsZCkgPT4gY2hpbGRyZW4ucHVzaChjaGlsZCkpO1xuICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH0sXG5cbiAgICBnZXREZXNjZW5kYW50c0xpc3QoY29tcG9uZW50KSB7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IFJlYWN0LkNoaWxkcmVuLmdldENoaWxkcmVuTGlzdChjb21wb25lbnQpO1xuICAgICAgY29uc3QgZGVzY2VuZGFudHMgPSBbXTtcbiAgICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIGRlc2NlbmRhbnRzLnB1c2goY2hpbGQpO1xuICAgICAgICBSZWFjdC5DaGlsZHJlbi5nZXREZXNjZW5kYW50c0xpc3QoY2hpbGQpLmZvckVhY2goKGNoaWxkRGVzY2VuZGFudCkgPT4gZGVzY2VuZGFudHMucHVzaChjaGlsZERlc2NlbmRhbnQpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGRlc2NlbmRhbnRzO1xuICAgIH0sXG5cbiAgICBtYXBEZXNjZW5kYW50cyhjb21wb25lbnQsIGZuKSB7XG4gICAgICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uZ2V0RGVzY2VuZGFudHNMaXN0KGNvbXBvbmVudCkubWFwKGZuKTtcbiAgICB9LFxuXG4gICAgbWFwVHJlZShjb21wb25lbnQsIGZuKSB7XG4gICAgICBjb25zdCB0cmVlID0gUmVhY3QuQ2hpbGRyZW4uZ2V0RGVzY2VuZGFudHNMaXN0KGNvbXBvbmVudCwgZm4pO1xuICAgICAgdHJlZS51bnNoaWZ0KGNvbXBvbmVudCk7XG4gICAgICByZXR1cm4gdHJlZS5tYXAoZm4pO1xuICAgIH0sXG5cbiAgICByZXN0b3JlQ2hpbGRyZW4oKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbiA9IF92YW5pbGxhUmVhY3RDaGlsZHJlbjtcbiAgICAgIHJldHVybiBfdmFuaWxsYVJlYWN0Q2hpbGRyZW47XG4gICAgfSxcblxuICAgIHBhdGNoQ2hpbGRyZW4oKSB7XG4gICAgICBSZWFjdC5DaGlsZHJlbiA9IF9wYXRjaGVkUmVhY3RDaGlsZHJlbjtcbiAgICAgIHJldHVybiBfcGF0Y2hlZFJlYWN0Q2hpbGRyZW47XG4gICAgfSxcblxuICAgIHRyYW5zZm9ybURlc2NlbmRhbnRzKGNvbXBvbmVudCwgZm4pIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4uZ2V0RGVzY2VuZGFudHNMaXN0KGNvbXBvbmVudCk7XG4gICAgICBpZihjaGlsZHJlbi5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgICAgIH1cbiAgICAgIGlmKGNvbXBvbmVudC5wcm9wcykge1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm1DaGlsZCA9IChjaGlsZCkgPT4gUmVhY3QuQ2hpbGRyZW4udHJhbnNmb3JtVHJlZShjaGlsZCwgZm4pO1xuICAgICAgICBjb21wb25lbnQucHJvcHMuY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXBEZXNjZW5kYW50cyhjb21wb25lbnQsIHRyYW5zZm9ybUNoaWxkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfSxcblxuICAgIHRyYW5zZm9ybVRyZWUoY29tcG9uZW50LCBmbikge1xuICAgICAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLnRyYW5zZm9ybURlc2NlbmRhbnRzKGZuKGNvbXBvbmVudCksIGZuKTtcbiAgICB9LFxuXG4gIH0pO1xuXG4gIHJldHVybiBfcGF0Y2hlZFJlYWN0Q2hpbGRyZW4ucGF0Y2hDaGlsZHJlbigpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
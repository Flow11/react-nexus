"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");
  var recase = require("change-case");
  var parse = require("css-parse");
  var _autoprefixer = require("autoprefixer-core");
  var CleanCSS = require("clean-css");

  var Style = function Style(style) {
    return Style.slowlyProcessReactStyle(style);
  };

  _.extend(Style, {
    Processors: {
      autoprefixer: function autoprefixer(css) {
        return _autoprefixer.process(css).css;
      },
      min: function min(css) {
        return new CleanCSS().minify(css);
      } },
    _processors: [],
    registerCSSProcessor: function registerCSSProcessor(process) {
      R.Style._processors.push(process);
    },
    applyAllProcessors: function applyAllProcessors(css) {
      var rCSS = css;
      _.each(Style._processors, function (process) {
        rCSS = process(rCSS);
      });
      return rCSS;
    },
    slowlyProcessReactStyle: function slowlyProcessReactStyle(style) {
      var css = R.Style.applyAllProcessors("* {\n" + R.Style.getCSSFromReactStyle(style) + "}\n");
      return R.Style.slowlyGetReactStyleFromCSS(css);
    },
    getCSSFromReactStyle: function getCSSFromReactStyle(style, indent) {
      indent = indent || "";
      R.Debug.dev(function () {
        assert(_.isPlainObject(style), "R.Style.getCSSFromReactStyle(...).style: expecting Object.");
      });
      return _.map(style, function (val, attr) {
        return indent + recase.paramCase(attr) + ": " + val + ";\n";
      }).join("");
    },
    slowlyGetReactStyleFromCSS: function slowlyGetReactStyleFromCSS(css) {
      var style = {};
      var parsed = parse(css);
      R.Debug.dev(function () {
        assert(_.size(parsed.stylesheet.rules) === 1, "R.Style.slowlyGetReactStyleFromCSS(...): expecting only 1 set of rules.");
      });
      _.each(parsed.stylesheet.rules, function (rule) {
        if (rule.type === "rule") {
          _.each(rule.declarations, function (decl) {
            if (decl.type === "declaration") {
              style[recase.camelCase(decl.property)] = decl.value;
            }
          });
        }
      });
      return style;
    } });

  return Style;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLlN0eWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQyxFQUFFO0FBQ3pCLE1BQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsTUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3BDLE1BQUksS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNqQyxNQUFJLGFBQWEsR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUNqRCxNQUFJLFFBQVEsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7O0FBRXBDLE1BQUksS0FBSyxHQUFHLFNBQVMsS0FBSyxDQUFDLEtBQUssRUFBRTtBQUM5QixXQUFPLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztHQUMvQyxDQUFDOztBQUVGLEdBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO0FBQ1osY0FBVSxFQUFFO0FBQ1Isa0JBQVksRUFBRSxTQUFTLFlBQVksQ0FBQyxHQUFHLEVBQUU7QUFDckMsZUFBTyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztPQUN6QztBQUNELFNBQUcsRUFBRSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEVBQUU7QUFDbkIsZUFBTyxJQUFJLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNyQyxFQUNKO0FBQ0QsZUFBVyxFQUFFLEVBQUU7QUFDZix3QkFBb0IsRUFBRSxTQUFTLG9CQUFvQixDQUFDLE9BQU8sRUFBRTtBQUN6RCxPQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDckM7QUFDRCxzQkFBa0IsRUFBRSxTQUFTLGtCQUFrQixDQUFDLEdBQUcsRUFBRTtBQUNqRCxVQUFJLElBQUksR0FBRyxHQUFHLENBQUM7QUFDZixPQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsVUFBUyxPQUFPLEVBQUU7QUFDeEMsWUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztPQUN4QixDQUFDLENBQUM7QUFDSCxhQUFPLElBQUksQ0FBQztLQUNmO0FBQ0QsMkJBQXVCLEVBQUUsU0FBUyx1QkFBdUIsQ0FBQyxLQUFLLEVBQUU7QUFDN0QsVUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUM1RixhQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsMEJBQTBCLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbEQ7QUFDRCx3QkFBb0IsRUFBRSxTQUFTLG9CQUFvQixDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUU7QUFDL0QsWUFBTSxHQUFHLE1BQU0sSUFBSSxFQUFFLENBQUM7QUFDdEIsT0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsWUFBVztBQUNuQixjQUFNLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsRUFBRSw0REFBNEQsQ0FBQyxDQUFDO09BQ2hHLENBQUMsQ0FBQztBQUNILGFBQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsVUFBUyxHQUFHLEVBQUUsSUFBSSxFQUFFO0FBQ3BDLGVBQU8sTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7T0FDL0QsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNmO0FBQ0QsOEJBQTBCLEVBQUUsU0FBUywwQkFBMEIsQ0FBQyxHQUFHLEVBQUU7QUFDakUsVUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsVUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLE9BQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVc7QUFDbkIsY0FBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUseUVBQXlFLENBQUMsQ0FBQztPQUM1SCxDQUFDLENBQUM7QUFDSCxPQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQzNDLFlBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7QUFDckIsV0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQ3JDLGdCQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssYUFBYSxFQUFFO0FBQzVCLG1CQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2FBQ3ZEO1dBQ0osQ0FBQyxDQUFDO1NBQ047T0FDSixDQUFDLENBQUM7QUFDSCxhQUFPLEtBQUssQ0FBQztLQUNoQixFQUNKLENBQUMsQ0FBQzs7QUFFSCxTQUFPLEtBQUssQ0FBQyIsImZpbGUiOiJSLlN0eWxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcbiAgICB2YXIgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XG4gICAgdmFyIGFzc2VydCA9IHJlcXVpcmUoXCJhc3NlcnRcIik7XG4gICAgdmFyIHJlY2FzZSA9IHJlcXVpcmUoXCJjaGFuZ2UtY2FzZVwiKTtcbiAgICB2YXIgcGFyc2UgPSByZXF1aXJlKFwiY3NzLXBhcnNlXCIpO1xuICAgIHZhciBfYXV0b3ByZWZpeGVyID0gcmVxdWlyZShcImF1dG9wcmVmaXhlci1jb3JlXCIpO1xuICAgIHZhciBDbGVhbkNTUyA9IHJlcXVpcmUoXCJjbGVhbi1jc3NcIik7XG5cbiAgICB2YXIgU3R5bGUgPSBmdW5jdGlvbiBTdHlsZShzdHlsZSkge1xuICAgICAgICByZXR1cm4gU3R5bGUuc2xvd2x5UHJvY2Vzc1JlYWN0U3R5bGUoc3R5bGUpO1xuICAgIH07XG5cbiAgICBfLmV4dGVuZChTdHlsZSwge1xuICAgICAgICBQcm9jZXNzb3JzOiB7XG4gICAgICAgICAgICBhdXRvcHJlZml4ZXI6IGZ1bmN0aW9uIGF1dG9wcmVmaXhlcihjc3MpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2F1dG9wcmVmaXhlci5wcm9jZXNzKGNzcykuY3NzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1pbjogZnVuY3Rpb24gbWluKGNzcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ2xlYW5DU1MoKS5taW5pZnkoY3NzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIF9wcm9jZXNzb3JzOiBbXSxcbiAgICAgICAgcmVnaXN0ZXJDU1NQcm9jZXNzb3I6IGZ1bmN0aW9uIHJlZ2lzdGVyQ1NTUHJvY2Vzc29yKHByb2Nlc3MpIHtcbiAgICAgICAgICAgIFIuU3R5bGUuX3Byb2Nlc3NvcnMucHVzaChwcm9jZXNzKTtcbiAgICAgICAgfSxcbiAgICAgICAgYXBwbHlBbGxQcm9jZXNzb3JzOiBmdW5jdGlvbiBhcHBseUFsbFByb2Nlc3NvcnMoY3NzKSB7XG4gICAgICAgICAgICB2YXIgckNTUyA9IGNzcztcbiAgICAgICAgICAgIF8uZWFjaChTdHlsZS5fcHJvY2Vzc29ycywgZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICAgICAgICAgICAgIHJDU1MgPSBwcm9jZXNzKHJDU1MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gckNTUztcbiAgICAgICAgfSxcbiAgICAgICAgc2xvd2x5UHJvY2Vzc1JlYWN0U3R5bGU6IGZ1bmN0aW9uIHNsb3dseVByb2Nlc3NSZWFjdFN0eWxlKHN0eWxlKSB7XG4gICAgICAgICAgICB2YXIgY3NzID0gUi5TdHlsZS5hcHBseUFsbFByb2Nlc3NvcnMoXCIqIHtcXG5cIiArIFIuU3R5bGUuZ2V0Q1NTRnJvbVJlYWN0U3R5bGUoc3R5bGUpICsgXCJ9XFxuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFIuU3R5bGUuc2xvd2x5R2V0UmVhY3RTdHlsZUZyb21DU1MoY3NzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q1NTRnJvbVJlYWN0U3R5bGU6IGZ1bmN0aW9uIGdldENTU0Zyb21SZWFjdFN0eWxlKHN0eWxlLCBpbmRlbnQpIHtcbiAgICAgICAgICAgIGluZGVudCA9IGluZGVudCB8fCBcIlwiO1xuICAgICAgICAgICAgUi5EZWJ1Zy5kZXYoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KF8uaXNQbGFpbk9iamVjdChzdHlsZSksIFwiUi5TdHlsZS5nZXRDU1NGcm9tUmVhY3RTdHlsZSguLi4pLnN0eWxlOiBleHBlY3RpbmcgT2JqZWN0LlwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIF8ubWFwKHN0eWxlLCBmdW5jdGlvbih2YWwsIGF0dHIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5kZW50ICsgcmVjYXNlLnBhcmFtQ2FzZShhdHRyKSArIFwiOiBcIiArIHZhbCArIFwiO1xcblwiO1xuICAgICAgICAgICAgfSkuam9pbihcIlwiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2xvd2x5R2V0UmVhY3RTdHlsZUZyb21DU1M6IGZ1bmN0aW9uIHNsb3dseUdldFJlYWN0U3R5bGVGcm9tQ1NTKGNzcykge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0ge307XG4gICAgICAgICAgICB2YXIgcGFyc2VkID0gcGFyc2UoY3NzKTtcbiAgICAgICAgICAgIFIuRGVidWcuZGV2KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGFzc2VydChfLnNpemUocGFyc2VkLnN0eWxlc2hlZXQucnVsZXMpID09PSAxLCBcIlIuU3R5bGUuc2xvd2x5R2V0UmVhY3RTdHlsZUZyb21DU1MoLi4uKTogZXhwZWN0aW5nIG9ubHkgMSBzZXQgb2YgcnVsZXMuXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfLmVhY2gocGFyc2VkLnN0eWxlc2hlZXQucnVsZXMsIGZ1bmN0aW9uKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICBpZihydWxlLnR5cGUgPT09IFwicnVsZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaChydWxlLmRlY2xhcmF0aW9ucywgZnVuY3Rpb24oZGVjbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGVjbC50eXBlID09PSBcImRlY2xhcmF0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVtyZWNhc2UuY2FtZWxDYXNlKGRlY2wucHJvcGVydHkpXSA9IGRlY2wudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIFN0eWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

exports.__esModule = true;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var users = [{
  userId: 'CategoricalDude',
  userName: 'Immanuel Kant',
  profilePicture: 'https://upload.wikimedia.org/wikipedia/commons/4/43/Immanuel_Kant_%28painted_portrait%29.jpg'
}, {
  userId: '!@#',
  userName: 'Frierich Nietzsche',
  profilePicture: 'https://upload.wikimedia.org/wikipedia/commons/1/1b/Nietzsche187a.jpg'
}, {
  userId: 'b@d_s@nt@',
  userName: 'Plato',
  profilePicture: 'https://upload.wikimedia.org/wikipedia/commons/8/88/Plato_Silanion_Musei_Capitolini_MC1377.jpg'
}];

exports.users = users;
var authTokens = [{
  authToken: 'E47Exd7RdDds',
  userId: '!@#'
}];

exports.authTokens = authTokens;
exports['default'] = _express2['default']().get('/users', function (req, res) {
  return res.send(users);
}).get('/users/:userId', function (req, res) {
  var user = _lodash2['default'].find(users, function (_ref) {
    var userId = _ref.userId;
    return userId === req.params.userId;
  });
  if (!users) {
    return res.sendStatus(404);
  }
  return res.send(user);
}).get('/me', function (req, res) {
  var token = _lodash2['default'].find(authTokens, function (_ref2) {
    var authToken = _ref2.authToken;
    return authToken === req.query.authToken;
  });
  if (!token) {
    return res.sendStatus(401);
  }
  var user = _lodash2['default'].find(users, function (_ref3) {
    var userId = _ref3.userId;
    return userId === token.userId;
  });
  if (!user) {
    return res.sendStatus(500);
  }
  return res.send(user);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9fdGVzdHNfXy9maXh0dXJlcy9hcHAuanN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztzQkFBYyxRQUFROzs7O3VCQUNGLFNBQVM7Ozs7QUFFdEIsSUFBTSxLQUFLLEdBQUcsQ0FDbkI7QUFDRSxRQUFNLEVBQUUsaUJBQWlCO0FBQ3pCLFVBQVEsRUFBRSxlQUFlO0FBQ3pCLGdCQUFjLEVBQUUsOEZBQThGO0NBQy9HLEVBQ0Q7QUFDRSxRQUFNLEVBQUUsS0FBSztBQUNiLFVBQVEsRUFBRSxvQkFBb0I7QUFDOUIsZ0JBQWMsRUFBRSx1RUFBdUU7Q0FDeEYsRUFDRDtBQUNFLFFBQU0sRUFBRSxXQUFXO0FBQ25CLFVBQVEsRUFBRSxPQUFPO0FBQ2pCLGdCQUFjLEVBQUUsZ0dBQWdHO0NBQ2pILENBQ0YsQ0FBQzs7O0FBRUssSUFBTSxVQUFVLEdBQUcsQ0FDeEI7QUFDRSxXQUFTLEVBQUUsY0FBYztBQUN6QixRQUFNLEVBQUUsS0FBSztDQUNkLENBQ0YsQ0FBQzs7O3FCQUVhLHNCQUFTLENBQ3JCLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBQyxHQUFHLEVBQUUsR0FBRztTQUN0QixHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztDQUFBLENBQ2hCLENBQ0EsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBSztBQUNuQyxNQUFNLElBQUksR0FBRyxvQkFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQUMsSUFBVTtRQUFSLE1BQU0sR0FBUixJQUFVLENBQVIsTUFBTTtXQUFPLE1BQU0sS0FBSyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU07R0FBQSxDQUFDLENBQUM7QUFDekUsTUFBRyxDQUFDLEtBQUssRUFBRTtBQUNULFdBQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUM1QjtBQUNELFNBQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN2QixDQUFDLENBQ0QsR0FBRyxDQUFDLEtBQUssRUFBRSxVQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUs7QUFDeEIsTUFBTSxLQUFLLEdBQUcsb0JBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFDLEtBQWE7UUFBWCxTQUFTLEdBQVgsS0FBYSxDQUFYLFNBQVM7V0FBTyxTQUFTLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxTQUFTO0dBQUEsQ0FBQyxDQUFDO0FBQ3ZGLE1BQUcsQ0FBQyxLQUFLLEVBQUU7QUFDVCxXQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7R0FDNUI7QUFDRCxNQUFNLElBQUksR0FBRyxvQkFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQUMsS0FBVTtRQUFSLE1BQU0sR0FBUixLQUFVLENBQVIsTUFBTTtXQUFPLE1BQU0sS0FBSyxLQUFLLENBQUMsTUFBTTtHQUFBLENBQUMsQ0FBQztBQUNwRSxNQUFHLENBQUMsSUFBSSxFQUFFO0FBQ1IsV0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQzVCO0FBQ0QsU0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0NBQ3ZCLENBQUMiLCJmaWxlIjoiX190ZXN0c19fL2ZpeHR1cmVzL2FwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XHJcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZXJzID0gW1xyXG4gIHtcclxuICAgIHVzZXJJZDogJ0NhdGVnb3JpY2FsRHVkZScsXHJcbiAgICB1c2VyTmFtZTogJ0ltbWFudWVsIEthbnQnLFxyXG4gICAgcHJvZmlsZVBpY3R1cmU6ICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzQvNDMvSW1tYW51ZWxfS2FudF8lMjhwYWludGVkX3BvcnRyYWl0JTI5LmpwZycsXHJcbiAgfSxcclxuICB7XHJcbiAgICB1c2VySWQ6ICchQCMnLFxyXG4gICAgdXNlck5hbWU6ICdGcmllcmljaCBOaWV0enNjaGUnLFxyXG4gICAgcHJvZmlsZVBpY3R1cmU6ICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzEvMWIvTmlldHpzY2hlMTg3YS5qcGcnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdXNlcklkOiAnYkBkX3NAbnRAJyxcclxuICAgIHVzZXJOYW1lOiAnUGxhdG8nLFxyXG4gICAgcHJvZmlsZVBpY3R1cmU6ICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzgvODgvUGxhdG9fU2lsYW5pb25fTXVzZWlfQ2FwaXRvbGluaV9NQzEzNzcuanBnJyxcclxuICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF1dGhUb2tlbnMgPSBbXHJcbiAge1xyXG4gICAgYXV0aFRva2VuOiAnRTQ3RXhkN1JkRGRzJyxcclxuICAgIHVzZXJJZDogJyFAIycsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGV4cHJlc3MoKVxyXG4gIC5nZXQoJy91c2VycycsIChyZXEsIHJlcykgPT5cclxuICAgIHJlcy5zZW5kKHVzZXJzKVxyXG4gIClcclxuICAuZ2V0KCcvdXNlcnMvOnVzZXJJZCcsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29uc3QgdXNlciA9IF8uZmluZCh1c2VycywgKHsgdXNlcklkIH0pID0+IHVzZXJJZCA9PT0gcmVxLnBhcmFtcy51c2VySWQpO1xyXG4gICAgaWYoIXVzZXJzKSB7XHJcbiAgICAgIHJldHVybiByZXMuc2VuZFN0YXR1cyg0MDQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcy5zZW5kKHVzZXIpO1xyXG4gIH0pXHJcbiAgLmdldCgnL21lJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25zdCB0b2tlbiA9IF8uZmluZChhdXRoVG9rZW5zLCAoeyBhdXRoVG9rZW4gfSkgPT4gYXV0aFRva2VuID09PSByZXEucXVlcnkuYXV0aFRva2VuKTtcclxuICAgIGlmKCF0b2tlbikge1xyXG4gICAgICByZXR1cm4gcmVzLnNlbmRTdGF0dXMoNDAxKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHVzZXIgPSBfLmZpbmQodXNlcnMsICh7IHVzZXJJZCB9KSA9PiB1c2VySWQgPT09IHRva2VuLnVzZXJJZCk7XHJcbiAgICBpZighdXNlcikge1xyXG4gICAgICByZXR1cm4gcmVzLnNlbmRTdGF0dXMoNTAwKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXMuc2VuZCh1c2VyKTtcclxuICB9KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9

"use strict";

var _classProps = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);

  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var raf = require("raf");

  var InterpolationTicker = (function () {
    var InterpolationTicker = function InterpolationTicker() {
      var _this = this;

      _.dev(function () {
        return params.should.be.an.Object;
      });
      _.defaults(params, {
        easing: "cubic-in-out",
        onTick: _.noop,
        onComplete: _.noop,
        onAbort: _.noop });

      _.dev(function () {
        return params.from.should.be.an.Object && params.to.should.be.an.Object && params.duration.should.be.a.Number && (_.isPlainObject(params.easing) || _.isString(params.easing)).should.be.ok && params.onTick.should.be.a.Function && params.onComplete.should.be.a.Function && params.onAbort.should.be.a.Function;
      });

      this._from = params.from;
      this._to = params.to;

      Object.keys(this._from).forEach(function (attr) {
        return _.has(_this._to, attr) ? _this._to[attr] = _this._from[attr] : void 0;
      });
      Object.keys(this._to).forEach(function (attr) {
        return _.has(_this._from, attr) ? _this._from[attr] = _this._to[attr] : void 0;
      });

      if (_.isPlainObject(params.easing)) {
        _.dev(function () {
          return params.easing.type.should.be.a.String && params.easing.params.should.be.an.Object;
        });
        this._easing = R.Animate.createEasing(params.easing.type, params.easing.params);
      } else {
        this._easing = R.Animate.createEasing(params.easing);
      }
      this._duration = params.duration;
      this._onTick = params.onTick;
      this._onComplete = params.onComplete;
      this._onAbort = params.onAbort;
      this._interpolators = _.mapValues(this._from, function (fromVal, attr) {
        return R.Animate.createInterpolator(fromVal, _this._to[attr]);
      });
      this._tick = R.scope(this._tick, this);
    };

    _classProps(InterpolationTicker, null, {
      start: {
        writable: true,
        value: function () {
          var _this2 = this;

          _.dev(function () {
            return (_this2._begin === null).should.be.ok;
          });
          this._begin = Date.now();
          this._end = this._begin + this._duration;
          this._requestAnimationFrameHandle = raf(this._tick);
        }
      },
      _tick: {
        writable: true,
        value: function () {
          var _this3 = this;

          var now = Date.now();
          if (now > this._end) {
            this._onTick(this._to, t);
            this._onComplete();
          } else {
            (function () {
              var t = (now - _this3._begin) / (_this3._end - _this3._begin);
              _this3._onTick(_.mapValues(_this3._interpolators, function (interpolator) {
                return interpolator(_this3._easing(t));
              }, t));
              _this3._requestAnimationFrameHandle = raf(_this3._tick);
            })();
          }
        }
      },
      abort: {
        writable: true,
        value: function () {
          if (this._requestAnimationFrameHandle) {
            raf.cancel(this._requestAnimationFrameHandle);
            this._requestAnimationFrameHandle = null;
          }
        }
      }
    });

    return InterpolationTicker;
  })();

  _.extend(InterpolationTicker.prototype, /** @lends R.Animate.InterpolationTicker.prototype */{
    _from: null,
    _to: null,
    _easing: null,
    _duration: null,
    _onTick: null,
    _onComplete: null,
    _onAbort: null,
    _requestAnimationFrameHandle: null,
    _begin: null,
    _end: null,
    _interpolators: null });

  return InterpolationTicker;
};
//# sourceMappingURL=data:application/json;base64,
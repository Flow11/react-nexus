"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");
  var d3 = require("d3");
  var raf = require("raf");
  var Animate = {
    Mixin: {
      _AnimateMixinHasAnimateMixin: true,
      _AnimateMixinInterpolationTickers: null,
      componentWillMount: function componentWillMount() {
        this._AnimateMixinInterpolationTickers = {};
      },
      componentWillUnmount: function componentWillUnmount() {
        _.each(this._AnimateMixinInterpolationTickers, function (interpolationTicker) {
          interpolationTicker.abort();
        });
        this._AnimateMixinInterpolationTickers = null;
      },
      isAnimating: function isAnimating(name) {
        return this._AnimateMixinInterpolationTickers[name];
      },
      _AnimateMixinGetStateKey: function _AnimateMixinGetStateKey(name) {
        return "_AnimateMixinStyle-" + name;
      },
      getAnimatedStyle: function getAnimatedStyle(name) {
        if (this.isAnimating(name)) {
          return this.state[this._AnimateMixinGetStateKey(name)];
        } else {
          R.Debug.dev(function () {
            console.warn("R.Animate.Mixin.getAnimatedStyle(...): no such animation.");
          });
          return {};
        }
      },
      abortAnimation: function abortAnimation(name) {
        R.Debug.dev(R.scope(function () {
          assert(this.isAnimating(name), "R.Animate.Mixin.abortAnimation(...): no such animation.");
        }, this));
        if (this.isAnimating(name)) {
          this._AnimateMixinInterpolationTickers[name].abort();
        }
      },
      animate: function animate(name, params) {
        if (this.isAnimating(name)) {
          this.abortAnimation(name);
        }
        params = _.extend({}, params, {
          onTick: _.noop,
          onComplete: _.noop,
          onAbort: _.noop });
        var original = {
          onTick: params.onTick,
          onComplete: params.onComplete,
          onAbort: params.onAbort };
        params.onTick = R.scope(function (animatedStyle, t) {
          original.onTick(animatedStyle, t);
          this.setStateIfMounted(R.record(this._AnimateMixinGetStateKey(name), animatedStyle));
        }, this);
        params.onComplete = R.scope(function (animatedStyle, t) {
          original.onComplete(animatedStyle, t);
          delete this._AnimateMixinInterpolationTickers[name];
          this.setStateIfMounted(R.record(this._AnimateMixinGetStateKey(name), void 0));
        }, this);
        params.onAbort = R.scope(function () {
          original.onAbort();
          delete this._AnimateMixinInterpolationTickers[name];
          this.setStateIfMounted(R.record(this._AnimateMixinGetStateKey(name), void 0));
        }, this);
        var interpolationTicker = new R.Animate.InterpolationTicker(params);
        this._AnimateMixinInterpolationTickers[name] = interpolationTicker;
        interpolationTicker.start();
      } },
    createInterpolator: function createInterpolator(from, to) {
      return d3.interpolate(from, to);
    },
    createEasing: function createEasing(type, params) {
      if (params) {
        var args = _.clone(params);
        args.unshift(type);
        return d3.ease.apply(d3, args);
      } else {
        return d3.ease(type);
      }
    },
    InterpolationTicker: function InterpolationTicker(params) {
      R.Debug.dev(function () {
        assert(_.isPlainObject(params), "R.Animate.InterpolationTicker(...).params: expected Object. ('" + params + "')");
      });
      _.defaults(params, {
        easing: "cubic-in-out",
        onTick: _.noop,
        onComplete: _.noop,
        onAbort: _.noop });
      R.Debug.dev(function () {
        assert(params.from && _.isPlainObject(params.from), "R.Animate.InterpolationTicker(...).params.from: expected Object. ('" + params.from + "')");
        assert(params.to && _.isPlainObject(params.to), "R.Animate.InterpolationTicker(...).params.to: expected Object. ('" + params.to + "')");
        assert(params.duration && _.isNumber(params.duration), "R.Animate.InterpolationTicker(...).params.duration: expected Number. ('" + params.duration + "')");
        assert(params.easing && (_.isPlainObject(params.easing) || _.isString(params.easing)), "R.Animate.InterpolationTicker(...).params.easing: expected { type: String, params: Object } or String. ('" + params.easing + "')");
        assert(params.onTick && _.isFunction(params.onTick), "R.Animate.InterpolationTicker(...).params.onTick: expected Function. ('" + params.onTick + "')");
        assert(params.onComplete && _.isFunction(params.onComplete), "R.Animate.InterpolationTicker(...).params.onComplete: expected Function. ('" + params.onComplete + "')");
        assert(params.onAbort && _.isFunction(params.onAbort), "R.Animate.InterpolationTicker(...).params.onAbort: expected Function. ('" + params.onAbort + "')");
      });
      this._from = params.from;
      this._to = params.to;
      _.each(this._from, R.scope(function (val, attr) {
        if (!_.has(this._to, attr)) {
          this._to[attr] = val;
        }
      }, this));
      _.each(this._to, R.scope(function (val, attr) {
        if (!_.has(this._from, attr)) {
          this._from[attr] = val;
        }
      }, this));
      if (_.isPlainObject(params.easing)) {
        R.Debug.dev(function () {
          assert(_.has(params.easing, "type") && _.isString(params.easing.type), "R.Animate.InterpolationTicker(...).params.easing: expected { type: String, params: Object }.");
          assert(_.has(params.easing, "params") && _.isString(params.easing.params), "R.Animate.InterpolationTicker(...).params.easing: expected { type: String, params: Object }.");
        });
        this._easing = R.Animate.createEasing(params.easing.type, params.easing.params);
      } else {
        this._easing = R.Animate.createEasing(params.easing);
      }
      this._duration = params.duration;
      this._onTick = params.onTick;
      this._onComplete = params.onComplete;
      this._onAbort = params.onAbort;
      this._interpolators = _.mapValues(this._from, R.scope(function (fromVal, attr) {
        var toVal = this._to[attr];
        return R.Animate.createInterpolator(fromVal, toVal);
      }, this));
      this._tick = R.scope(this._tick, this);
    },
    shouldEnableHA: function shouldEnableHA() {
      if (R.isClient()) {
        var userAgent = navigator.userAgent;
        var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
        var isGingerbread = /Android 2\.3\.[3-7]/i.test(userAgent);
        return userAgent && isMobile && !isGingerbread;
      } else {
        return true;
      }
    } };

  _.extend(Animate.InterpolationTicker.prototype, /** @lends R.Animate.InterpolationTicker.prototype */{
    _from: null,
    _to: null,
    _easing: null,
    _duration: null,
    _onTick: null,
    _onComplete: null,
    _onAbort: null,
    _requestAnimationFrameHandle: null,
    _begin: null,
    _end: null,
    _interpolators: null,
    start: function start() {
      R.Debug.check(this._begin === null, "R.Animate.InterpolationTicker.start(...): animation already started.");
      this._begin = Date.now();
      this._end = this._begin + this._duration;
      this._requestAnimationFrameHandle = raf(this._tick);
    },
    _tick: function _tick() {
      var now = Date.now();
      if (now > this._end) {
        this._onTick(this._to, t);
        this._onComplete();
      } else {
        var t = (now - this._begin) / (this._end - this._begin);
        this._onTick(_.mapValues(this._interpolators, R.scope(function (interpolator) {
          return interpolator(this._easing(t));
        }, this)), t);
        this._requestAnimationFrameHandle = raf(this._tick);
      }
    },
    abort: function abort() {
      if (this._requestAnimationFrameHandle) {
        raf.cancel(this._requestAnimationFrameHandle);
        this._requestAnimationFrameHandle = null;
      }
    } });

  return Animate;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLkFuaW1hdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDekIsTUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMvQixNQUFJLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkIsTUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3pCLE1BQUksT0FBTyxHQUFHO0FBQ1YsU0FBSyxFQUFFO0FBQ0gsa0NBQTRCLEVBQUUsSUFBSTtBQUNsQyx1Q0FBaUMsRUFBRSxJQUFJO0FBQ3ZDLHdCQUFrQixFQUFFLFNBQVMsa0JBQWtCLEdBQUc7QUFDOUMsWUFBSSxDQUFDLGlDQUFpQyxHQUFHLEVBQUUsQ0FBQztPQUMvQztBQUNELDBCQUFvQixFQUFFLFNBQVMsb0JBQW9CLEdBQUc7QUFDbEQsU0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsVUFBUyxtQkFBbUIsRUFBRTtBQUN6RSw2QkFBbUIsQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUMvQixDQUFDLENBQUM7QUFDSCxZQUFJLENBQUMsaUNBQWlDLEdBQUcsSUFBSSxDQUFDO09BQ2pEO0FBQ0QsaUJBQVcsRUFBRSxTQUFTLFdBQVcsQ0FBQyxJQUFJLEVBQUU7QUFDcEMsZUFBTyxJQUFJLENBQUMsaUNBQWlDLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDdkQ7QUFDRCw4QkFBd0IsRUFBRSxTQUFTLHdCQUF3QixDQUFDLElBQUksRUFBRTtBQUM5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LENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBQzlDLFlBQUksQ0FBQyw0QkFBNEIsR0FBRyxJQUFJLENBQUM7T0FDNUM7S0FDSixFQUNKLENBQUMsQ0FBQzs7QUFFSCxTQUFPLE9BQU8sQ0FBQztDQUNsQixDQUFDIiwiZmlsZSI6IlIuQW5pbWF0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XHJcbiAgICB2YXIgXyA9IHJlcXVpcmUoXCJsb2Rhc2hcIik7XHJcbiAgICB2YXIgYXNzZXJ0ID0gcmVxdWlyZShcImFzc2VydFwiKTtcclxuICAgIHZhciBkMyA9IHJlcXVpcmUoXCJkM1wiKTtcclxuICAgIHZhciByYWYgPSByZXF1aXJlKFwicmFmXCIpO1xyXG4gICAgdmFyIEFuaW1hdGUgPSB7XHJcbiAgICAgICAgTWl4aW46IHtcclxuICAgICAgICAgICAgX0FuaW1hdGVNaXhpbkhhc0FuaW1hdGVNaXhpbjogdHJ1ZSxcclxuICAgICAgICAgICAgX0FuaW1hdGVNaXhpbkludGVycG9sYXRpb25UaWNrZXJzOiBudWxsLFxyXG4gICAgICAgICAgICBjb21wb25lbnRXaWxsTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX0FuaW1hdGVNaXhpbkludGVycG9sYXRpb25UaWNrZXJzID0ge307XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICAgICAgICAgIF8uZWFjaCh0aGlzLl9BbmltYXRlTWl4aW5JbnRlcnBvbGF0aW9uVGlja2VycywgZnVuY3Rpb24oaW50ZXJwb2xhdGlvblRpY2tlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGludGVycG9sYXRpb25UaWNrZXIuYWJvcnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fQW5pbWF0ZU1peGluSW50ZXJwb2xhdGlvblRpY2tlcnMgPSBudWxsO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpc0FuaW1hdGluZzogZnVuY3Rpb24gaXNBbmltYXRpbmcobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX0FuaW1hdGVNaXhpbkludGVycG9sYXRpb25UaWNrZXJzW25hbWVdO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBfQW5pbWF0ZU1peGluR2V0U3RhdGVLZXk6IGZ1bmN0aW9uIF9BbmltYXRlTWl4aW5HZXRTdGF0ZUtleShuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJfQW5pbWF0ZU1peGluU3R5bGUtXCIgKyBuYW1lO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRBbmltYXRlZFN0eWxlOiBmdW5jdGlvbiBnZXRBbmltYXRlZFN0eWxlKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNBbmltYXRpbmcobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZVt0aGlzLl9BbmltYXRlTWl4aW5HZXRTdGF0ZUtleShuYW1lKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBSLkRlYnVnLmRldihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiUi5BbmltYXRlLk1peGluLmdldEFuaW1hdGVkU3R5bGUoLi4uKTogbm8gc3VjaCBhbmltYXRpb24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWJvcnRBbmltYXRpb246IGZ1bmN0aW9uIGFib3J0QW5pbWF0aW9uKG5hbWUpIHtcclxuICAgICAgICAgICAgICAgIFIuRGVidWcuZGV2KFIuc2NvcGUoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHRoaXMuaXNBbmltYXRpbmcobmFtZSksIFwiUi5BbmltYXRlLk1peGluLmFib3J0QW5pbWF0aW9uKC4uLik6IG5vIHN1Y2ggYW5pbWF0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNBbmltYXRpbmcobmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9BbmltYXRlTWl4aW5JbnRlcnBvbGF0aW9uVGlja2Vyc1tuYW1lXS5hYm9ydCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRlOiBmdW5jdGlvbiBhbmltYXRlKG5hbWUsIHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgaWYodGhpcy5pc0FuaW1hdGluZyhuYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWJvcnRBbmltYXRpb24obmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSBfLmV4dGVuZCh7fSwgcGFyYW1zLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25UaWNrOiBfLm5vb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogXy5ub29wLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQWJvcnQ6IF8ubm9vcCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9uVGljazogcGFyYW1zLm9uVGljayxcclxuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBwYXJhbXMub25Db21wbGV0ZSxcclxuICAgICAgICAgICAgICAgICAgICBvbkFib3J0OiBwYXJhbXMub25BYm9ydCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMub25UaWNrID0gUi5zY29wZShmdW5jdGlvbihhbmltYXRlZFN0eWxlLCB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwub25UaWNrKGFuaW1hdGVkU3R5bGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGVJZk1vdW50ZWQoUi5yZWNvcmQodGhpcy5fQW5pbWF0ZU1peGluR2V0U3RhdGVLZXkobmFtZSksIGFuaW1hdGVkU3R5bGUpKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLm9uQ29tcGxldGUgPSBSLnNjb3BlKGZ1bmN0aW9uKGFuaW1hdGVkU3R5bGUsIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbC5vbkNvbXBsZXRlKGFuaW1hdGVkU3R5bGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9BbmltYXRlTWl4aW5JbnRlcnBvbGF0aW9uVGlja2Vyc1tuYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlSWZNb3VudGVkKFIucmVjb3JkKHRoaXMuX0FuaW1hdGVNaXhpbkdldFN0YXRlS2V5KG5hbWUpLCB2b2lkIDApKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLm9uQWJvcnQgPSBSLnNjb3BlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsLm9uQWJvcnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fQW5pbWF0ZU1peGluSW50ZXJwb2xhdGlvblRpY2tlcnNbbmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZUlmTW91bnRlZChSLnJlY29yZCh0aGlzLl9BbmltYXRlTWl4aW5HZXRTdGF0ZUtleShuYW1lKSwgdm9pZCAwKSk7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHZhciBpbnRlcnBvbGF0aW9uVGlja2VyID0gbmV3IFIuQW5pbWF0ZS5JbnRlcnBvbGF0aW9uVGlja2VyKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9BbmltYXRlTWl4aW5JbnRlcnBvbGF0aW9uVGlja2Vyc1tuYW1lXSA9IGludGVycG9sYXRpb25UaWNrZXI7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0aW9uVGlja2VyLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBjcmVhdGVJbnRlcnBvbGF0b3I6IGZ1bmN0aW9uIGNyZWF0ZUludGVycG9sYXRvcihmcm9tLCB0bykge1xyXG4gICAgICAgICAgICByZXR1cm4gZDMuaW50ZXJwb2xhdGUoZnJvbSwgdG8pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlRWFzaW5nOiBmdW5jdGlvbiBjcmVhdGVFYXNpbmcodHlwZSwgcGFyYW1zKSB7XHJcbiAgICAgICAgICAgIGlmKHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBfLmNsb25lKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICBhcmdzLnVuc2hpZnQodHlwZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDMuZWFzZS5hcHBseShkMywgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZDMuZWFzZSh0eXBlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgSW50ZXJwb2xhdGlvblRpY2tlcjogZnVuY3Rpb24gSW50ZXJwb2xhdGlvblRpY2tlcihwYXJhbXMpIHtcclxuICAgICAgICAgICAgUi5EZWJ1Zy5kZXYoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQoXy5pc1BsYWluT2JqZWN0KHBhcmFtcyksIFwiUi5BbmltYXRlLkludGVycG9sYXRpb25UaWNrZXIoLi4uKS5wYXJhbXM6IGV4cGVjdGVkIE9iamVjdC4gKCdcIiArIHBhcmFtcyArIFwiJylcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfLmRlZmF1bHRzKHBhcmFtcywge1xyXG4gICAgICAgICAgICAgICAgZWFzaW5nOiBcImN1YmljLWluLW91dFwiLFxyXG4gICAgICAgICAgICAgICAgb25UaWNrOiBfLm5vb3AsXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiBfLm5vb3AsXHJcbiAgICAgICAgICAgICAgICBvbkFib3J0OiBfLm5vb3AsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBSLkRlYnVnLmRldihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGFzc2VydChwYXJhbXMuZnJvbSAmJiBfLmlzUGxhaW5PYmplY3QocGFyYW1zLmZyb20pLCBcIlIuQW5pbWF0ZS5JbnRlcnBvbGF0aW9uVGlja2VyKC4uLikucGFyYW1zLmZyb206IGV4cGVjdGVkIE9iamVjdC4gKCdcIiArIHBhcmFtcy5mcm9tICsgXCInKVwiKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChwYXJhbXMudG8gJiYgXy5pc1BsYWluT2JqZWN0KHBhcmFtcy50byksIFwiUi5BbmltYXRlLkludGVycG9sYXRpb25UaWNrZXIoLi4uKS5wYXJhbXMudG86IGV4cGVjdGVkIE9iamVjdC4gKCdcIiArIHBhcmFtcy50byArIFwiJylcIik7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQocGFyYW1zLmR1cmF0aW9uICYmIF8uaXNOdW1iZXIocGFyYW1zLmR1cmF0aW9uKSwgXCJSLkFuaW1hdGUuSW50ZXJwb2xhdGlvblRpY2tlciguLi4pLnBhcmFtcy5kdXJhdGlvbjogZXhwZWN0ZWQgTnVtYmVyLiAoJ1wiICsgcGFyYW1zLmR1cmF0aW9uICsgXCInKVwiKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChwYXJhbXMuZWFzaW5nICYmIChfLmlzUGxhaW5PYmplY3QocGFyYW1zLmVhc2luZykgfHwgXy5pc1N0cmluZyhwYXJhbXMuZWFzaW5nKSksIFwiUi5BbmltYXRlLkludGVycG9sYXRpb25UaWNrZXIoLi4uKS5wYXJhbXMuZWFzaW5nOiBleHBlY3RlZCB7IHR5cGU6IFN0cmluZywgcGFyYW1zOiBPYmplY3QgfSBvciBTdHJpbmcuICgnXCIgKyBwYXJhbXMuZWFzaW5nICsgXCInKVwiKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChwYXJhbXMub25UaWNrICYmIF8uaXNGdW5jdGlvbihwYXJhbXMub25UaWNrKSwgXCJSLkFuaW1hdGUuSW50ZXJwb2xhdGlvblRpY2tlciguLi4pLnBhcmFtcy5vblRpY2s6IGV4cGVjdGVkIEZ1bmN0aW9uLiAoJ1wiICsgcGFyYW1zLm9uVGljayArIFwiJylcIik7XHJcbiAgICAgICAgICAgICAgICBhc3NlcnQocGFyYW1zLm9uQ29tcGxldGUgJiYgXy5pc0Z1bmN0aW9uKHBhcmFtcy5vbkNvbXBsZXRlKSwgXCJSLkFuaW1hdGUuSW50ZXJwb2xhdGlvblRpY2tlciguLi4pLnBhcmFtcy5vbkNvbXBsZXRlOiBleHBlY3RlZCBGdW5jdGlvbi4gKCdcIiArIHBhcmFtcy5vbkNvbXBsZXRlICsgXCInKVwiKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydChwYXJhbXMub25BYm9ydCAmJiBfLmlzRnVuY3Rpb24ocGFyYW1zLm9uQWJvcnQpLCBcIlIuQW5pbWF0ZS5JbnRlcnBvbGF0aW9uVGlja2VyKC4uLikucGFyYW1zLm9uQWJvcnQ6IGV4cGVjdGVkIEZ1bmN0aW9uLiAoJ1wiICsgcGFyYW1zLm9uQWJvcnQgKyBcIicpXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5fZnJvbSA9IHBhcmFtcy5mcm9tO1xyXG4gICAgICAgICAgICB0aGlzLl90byA9IHBhcmFtcy50bztcclxuICAgICAgICAgICAgXy5lYWNoKHRoaXMuX2Zyb20sIFIuc2NvcGUoZnVuY3Rpb24odmFsLCBhdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBpZighXy5oYXModGhpcy5fdG8sIGF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdG9bYXR0cl0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcclxuICAgICAgICAgICAgXy5lYWNoKHRoaXMuX3RvLCBSLnNjb3BlKGZ1bmN0aW9uKHZhbCwgYXR0cikge1xyXG4gICAgICAgICAgICAgICAgaWYoIV8uaGFzKHRoaXMuX2Zyb20sIGF0dHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZnJvbVthdHRyXSA9IHZhbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgICAgICAgICBpZihfLmlzUGxhaW5PYmplY3QocGFyYW1zLmVhc2luZykpIHtcclxuICAgICAgICAgICAgICAgIFIuRGVidWcuZGV2KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChfLmhhcyhwYXJhbXMuZWFzaW5nLCBcInR5cGVcIikgJiYgXy5pc1N0cmluZyhwYXJhbXMuZWFzaW5nLnR5cGUpLCBcIlIuQW5pbWF0ZS5JbnRlcnBvbGF0aW9uVGlja2VyKC4uLikucGFyYW1zLmVhc2luZzogZXhwZWN0ZWQgeyB0eXBlOiBTdHJpbmcsIHBhcmFtczogT2JqZWN0IH0uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChfLmhhcyhwYXJhbXMuZWFzaW5nLCBcInBhcmFtc1wiKSAmJiBfLmlzU3RyaW5nKHBhcmFtcy5lYXNpbmcucGFyYW1zKSwgXCJSLkFuaW1hdGUuSW50ZXJwb2xhdGlvblRpY2tlciguLi4pLnBhcmFtcy5lYXNpbmc6IGV4cGVjdGVkIHsgdHlwZTogU3RyaW5nLCBwYXJhbXM6IE9iamVjdCB9LlwiKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWFzaW5nID0gUi5BbmltYXRlLmNyZWF0ZUVhc2luZyhwYXJhbXMuZWFzaW5nLnR5cGUsIHBhcmFtcy5lYXNpbmcucGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Vhc2luZyA9IFIuQW5pbWF0ZS5jcmVhdGVFYXNpbmcocGFyYW1zLmVhc2luZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBwYXJhbXMuZHVyYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuX29uVGljayA9IHBhcmFtcy5vblRpY2s7XHJcbiAgICAgICAgICAgIHRoaXMuX29uQ29tcGxldGUgPSBwYXJhbXMub25Db21wbGV0ZTtcclxuICAgICAgICAgICAgdGhpcy5fb25BYm9ydCA9IHBhcmFtcy5vbkFib3J0O1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRlcnBvbGF0b3JzID0gXy5tYXBWYWx1ZXModGhpcy5fZnJvbSwgUi5zY29wZShmdW5jdGlvbihmcm9tVmFsLCBhdHRyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdG9WYWwgPSB0aGlzLl90b1thdHRyXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBSLkFuaW1hdGUuY3JlYXRlSW50ZXJwb2xhdG9yKGZyb21WYWwsIHRvVmFsKTtcclxuICAgICAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLl90aWNrID0gUi5zY29wZSh0aGlzLl90aWNrLCB0aGlzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNob3VsZEVuYWJsZUhBOiBmdW5jdGlvbiBzaG91bGRFbmFibGVIQSgpIHtcclxuICAgICAgICAgICAgaWYoUi5pc0NsaWVudCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlckFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgICAgICAgICAgICAgIHZhciBpc01vYmlsZSA9IC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdCh1c2VyQWdlbnQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzR2luZ2VyYnJlYWQgPSAvQW5kcm9pZCAyXFwuM1xcLlszLTddL2kudGVzdCh1c2VyQWdlbnQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJBZ2VudCAmJiBpc01vYmlsZSAmJiAhaXNHaW5nZXJicmVhZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgXy5leHRlbmQoQW5pbWF0ZS5JbnRlcnBvbGF0aW9uVGlja2VyLnByb3RvdHlwZSwgLyoqIEBsZW5kcyBSLkFuaW1hdGUuSW50ZXJwb2xhdGlvblRpY2tlci5wcm90b3R5cGUgKi8ge1xyXG4gICAgICAgIF9mcm9tOiBudWxsLFxyXG4gICAgICAgIF90bzogbnVsbCxcclxuICAgICAgICBfZWFzaW5nOiBudWxsLFxyXG4gICAgICAgIF9kdXJhdGlvbjogbnVsbCxcclxuICAgICAgICBfb25UaWNrOiBudWxsLFxyXG4gICAgICAgIF9vbkNvbXBsZXRlOiBudWxsLFxyXG4gICAgICAgIF9vbkFib3J0OiBudWxsLFxyXG4gICAgICAgIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVIYW5kbGU6IG51bGwsXHJcbiAgICAgICAgX2JlZ2luOiBudWxsLFxyXG4gICAgICAgIF9lbmQ6IG51bGwsXHJcbiAgICAgICAgX2ludGVycG9sYXRvcnM6IG51bGwsXHJcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkge1xyXG4gICAgICAgICAgICBSLkRlYnVnLmNoZWNrKHRoaXMuX2JlZ2luID09PSBudWxsLCBcIlIuQW5pbWF0ZS5JbnRlcnBvbGF0aW9uVGlja2VyLnN0YXJ0KC4uLik6IGFuaW1hdGlvbiBhbHJlYWR5IHN0YXJ0ZWQuXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl9iZWdpbiA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VuZCA9IHRoaXMuX2JlZ2luICsgdGhpcy5fZHVyYXRpb247XHJcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUhhbmRsZSA9IHJhZih0aGlzLl90aWNrKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF90aWNrOiBmdW5jdGlvbiBfdGljaygpIHtcclxuICAgICAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIGlmKG5vdyA+IHRoaXMuX2VuZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25UaWNrKHRoaXMuX3RvLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uQ29tcGxldGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gKG5vdyAtIHRoaXMuX2JlZ2luKS8odGhpcy5fZW5kIC0gdGhpcy5fYmVnaW4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25UaWNrKF8ubWFwVmFsdWVzKHRoaXMuX2ludGVycG9sYXRvcnMsIFIuc2NvcGUoZnVuY3Rpb24oaW50ZXJwb2xhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGludGVycG9sYXRvcih0aGlzLl9lYXNpbmcodCkpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcykpLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUhhbmRsZSA9IHJhZih0aGlzLl90aWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KCkge1xyXG4gICAgICAgICAgICBpZih0aGlzLl9yZXF1ZXN0QW5pbWF0aW9uRnJhbWVIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIHJhZi5jYW5jZWwodGhpcy5fcmVxdWVzdEFuaW1hdGlvbkZyYW1lSGFuZGxlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RBbmltYXRpb25GcmFtZUhhbmRsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIEFuaW1hdGU7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
"use strict";

var _classProps = function (child, staticProps, instanceProps) {
  if (staticProps) Object.defineProperties(child, staticProps);

  if (instanceProps) Object.defineProperties(child.prototype, instanceProps);
};

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var d3 = require("d3");
  var raf = require("raf");

  var InterpolationTicker = (function () {
    var InterpolationTicker = function InterpolationTicker() {
      var _this = this;

      _.dev(function () {
        return params.should.be.an.Object;
      });
      _.defaults(params, {
        easing: "cubic-in-out",
        onTick: _.noop,
        onComplete: _.noop,
        onAbort: _.noop });

      _.dev(function () {
        return params.from.should.be.an.Object && params.to.should.be.an.Object && params.duration.should.be.a.Number && (_.isPlainObject(params.easing) || _.isString(params.easing)).should.be.ok && params.onTick.should.be.a.Function && params.onComplete.should.be.a.Function && params.onAbort.should.be.a.Function;
      });

      this._from = params.from;
      this._to = params.to;

      Object.keys(this._from).forEach(function (attr) {
        return _.has(_this._to, attr) ? _this._to[attr] = _this._from[attr] : void 0;
      });
      Object.keys(this._to).forEach(function (attr) {
        return _.has(_this._from, attr) ? _this._from[attr] = _this._to[attr] : void 0;
      });

      if (_.isPlainObject(params.easing)) {
        _.dev(function () {
          return params.easing.type.should.be.a.String && params.easing.params.should.be.an.Object;
        });
        this._easing = R.Animate.createEasing(params.easing.type, params.easing.params);
      } else {
        this._easing = R.Animate.createEasing(params.easing);
      }
      this._duration = params.duration;
      this._onTick = params.onTick;
      this._onComplete = params.onComplete;
      this._onAbort = params.onAbort;
      this._interpolators = _.mapValues(this._from, function (fromVal, attr) {
        return R.Animate.createInterpolator(fromVal, _this._to[attr]);
      });
      this._tick = R.scope(this._tick, this);
    };

    _classProps(InterpolationTicker, null, {
      start: {
        writable: true,
        value: function () {
          var _this2 = this;

          _.dev(function () {
            return (_this2._begin === null).should.be.ok;
          });
          this._begin = Date.now();
          this._end = this._begin + this._duration;
          this._requestAnimationFrameHandle = raf(this._tick);
        }
      },
      _tick: {
        writable: true,
        value: function () {
          var _this3 = this;

          var now = Date.now();
          if (now > this._end) {
            this._onTick(this._to, t);
            this._onComplete();
          } else {
            (function () {
              var t = (now - _this3._begin) / (_this3._end - _this3._begin);
              _this3._onTick(_.mapValues(_this3._interpolators, function (interpolator) {
                return interpolator(_this3._easing(t));
              }, t));
              _this3._requestAnimationFrameHandle = raf(_this3._tick);
            })();
          }
        }
      },
      abort: {
        writable: true,
        value: function () {
          if (this._requestAnimationFrameHandle) {
            raf.cancel(this._requestAnimationFrameHandle);
            this._requestAnimationFrameHandle = null;
          }
        }
      }
    });

    return InterpolationTicker;
  })();

  _.extend(InterpolationTicker.prototype, /** @lends R.Animate.InterpolationTicker.prototype */{
    _from: null,
    _to: null,
    _easing: null,
    _duration: null,
    _onTick: null,
    _onComplete: null,
    _onAbort: null,
    _requestAnimationFrameHandle: null,
    _begin: null,
    _end: null,
    _interpolators: null });

  var Animate = {
    Mixin: {
      _AnimateMixinHasAnimateMixin: true,
      _AnimateMixinInterpolationTickers: null,

      componentWillMount: function () {
        this._AnimateMixinInterpolationTickers = {};
      },

      componentWillUnmount: function () {
        var _this4 = this;

        Object.keys(this._AnimateMixinInterpolationTickers).forEach(function (name) {
          return _this4._AnimateMixinInterpolationTickers[name].abort();
        });
        this._AnimateMixinInterpolationTickers = null;
      },

      isAnimating: function (name) {
        return this._AnimateMixinInterpolationTickers[name];
      },

      _AnimateMixinGetStateKey: function (name) {
        return "_AnimateMixinStyle-" + name;
      },

      getAnimatedStyle: function (name) {
        if (this.isAnimating(name)) {
          return this.state[this._AnimateMixinGetStateKey(name)];
        } else {
          _.dev(function () {
            return console.warn("R.Animate.Mixin.getAnimatedStyle(...): no such animation.");
          });
          return {};
        }
      },

      abortAnimation: function (name) {
        var _this5 = this;

        _.dev(function () {
          return _this5.isAnimating(name).should.be.ok;
        });
        if (this.isAnimating(name)) {
          this._AnimateMixinInterpolationTickers[name].abort();
        }
      },

      animate: function (name, params) {
        var _this6 = this;

        if (this.isAnimating(name)) {
          this.abortAnimation(name);
        }

        params = _.extend({}, params, {
          onTick: _.noop,
          onComplete: _.noop,
          onAbort: _.noop });

        var original = {
          onTick: params.onTick,
          onComplete: params.onComplete,
          onAbort: params.onAbort };

        params.onTick = function (animatedStyle, t) {
          original.onTick(animatedStyle, t);
          _this6.setStateIfMounted((function (_ref) {
            _ref[_this6._AnimateMixinGetStateKey(name)] = animatedStyle;
            return _ref;
          })({}));
        };

        params.onComplete = function (animatedStyle, t) {
          original.onComplete(animatedStyle, t);
          delete _this6._AnimateMixinInterpolationTickers[name];
          _this6.setStateIfMounted((function (_ref2) {
            _ref2[_this6._AnimateMixinGetStateKey(name)] = void 0;
            return _ref2;
          })({}));
        };

        params.onAbort = function () {
          original.onAbort();
          delete _this6._AnimateMixinInterpolationTickers[name];
          _this6.setStateIfMounted((function (_ref3) {
            _ref3[_this6._AnimateMixinGetStateKey(name)] = void 0;
            return _ref3;
          })({}));
        };

        var interpolationTicker = new R.Animate.InterpolationTicker(params);
        this._AnimateMixinInterpolationTickers[name] = interpolationTicker;
        interpolationTicker.start();
      } },

    createInterpolator: function (from, to) {
      return d3.interpolate(from, to);
    },

    createEasing: function (type, params) {
      if (params) {
        var args = _.clone(params);
        args.unshift(type);
        return d3.ease.apply(d3, args);
      } else {
        return d3.ease(type);
      }
    },

    InterpolationTicker: InterpolationTicker,

    shouldEnableHA: function () {
      if (_.isClient()) {
        var userAgent = navigator.userAgent;
        var isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
        var isGingerbread = /Android 2\.3\.[3-7]/i.test(userAgent);
        return userAgent && isMobile && !isGingerbread;
      } else {
        return true;
      }
    } };

  return Animate;
};
//# sourceMappingURL=data:application/json;base64,
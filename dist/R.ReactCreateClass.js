"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var React = R.React;

  var _vanillaCreateClass = React.createClass;

  var _patchedCreateClass = function createClass(specs) {
    _.defaults(specs, {
      getFluxStoreSubscriptions: function () {
        return {};
      },
      statics: {} });

    var createdClass;

    function __ReactNexusSurrogate(_ref) {
      var context = _ref.context;
      var props = _ref.props;
      var state = _ref.state;
      var instance;
      React.withContext(context, function () {
        state = state || {};
        var element = React.createElement(createdClass, _.omit(props, "children"), props.children);
        instance = R.instantiateReactComponent(element);
        _.extend(instance, { context: context });
        if (instance.getInitialState) {
          state = _.extend({}, state, instance.getInitialState() || {});
        }
        _.extend(instance, { state: state, __ReactNexusSurrogate: __ReactNexusSurrogate });
      });
      return instance;
    }
    _.extend(specs.statics, { __ReactNexusSurrogate: __ReactNexusSurrogate });

    createdClass = _vanillaCreateClass(specs);
    return createdClass;
  };

  _.extend(_patchedCreateClass, {
    patchCreateClass: function () {
      React.createClass = _patchedCreateClass;
      return _patchedCreateClass;
    },

    restoreCreateClass: function () {
      React.createdClass = _vanillaCreateClass;
      return _vanillaCreateClass;
    } });

  return _patchedCreateClass.patchCreateClass();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlIuUmVhY3RDcmVhdGVDbGFzcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxVQUFTLENBQUMsRUFBRTtBQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2QsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFdEIsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDOztBQUU5QyxNQUFNLG1CQUFtQixHQUFHLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUN0RCxLQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRTtBQUNoQiwrQkFBeUIsRUFBQSxZQUFHO0FBQUUsZUFBTyxFQUFFLENBQUM7T0FBRTtBQUMxQyxhQUFPLEVBQUUsRUFBRSxFQUNaLENBQUMsQ0FBQzs7QUFFSCxRQUFJLFlBQVksQ0FBQzs7QUFFakIsYUFBUyxxQkFBcUIsT0FBNEI7VUFBekIsT0FBTyxRQUFQLE9BQU87VUFBRSxLQUFLLFFBQUwsS0FBSztVQUFFLEtBQUssUUFBTCxLQUFLO0FBQ3BELFVBQUksUUFBUSxDQUFDO0FBQ2IsV0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsWUFBTTtBQUMvQixhQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztBQUNwQixZQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDM0YsZ0JBQVEsR0FBRyxDQUFDLENBQUMseUJBQXlCLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDaEQsU0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQVAsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoQyxZQUFHLFFBQVEsQ0FBQyxlQUFlLEVBQUU7QUFDM0IsZUFBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDL0Q7QUFDRCxTQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLEtBQUssRUFBTCxLQUFLLEVBQUUscUJBQXFCLEVBQXJCLHFCQUFxQixFQUFFLENBQUMsQ0FBQztPQUN0RCxDQUFDLENBQUM7QUFDSCxhQUFPLFFBQVEsQ0FBQztLQUNqQjtBQUNELEtBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLHFCQUFxQixFQUFyQixxQkFBcUIsRUFBRSxDQUFDLENBQUM7O0FBRW5ELGdCQUFZLEdBQUcsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUMsV0FBTyxZQUFZLENBQUM7R0FDckIsQ0FBQzs7QUFFRixHQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixFQUFFO0FBQzVCLG9CQUFnQixFQUFBLFlBQUc7QUFDakIsV0FBSyxDQUFDLFdBQVcsR0FBRyxtQkFBbUIsQ0FBQztBQUN4QyxhQUFPLG1CQUFtQixDQUFDO0tBQzVCOztBQUVELHNCQUFrQixFQUFBLFlBQUc7QUFDbkIsV0FBSyxDQUFDLFlBQVksR0FBRyxtQkFBbUIsQ0FBQztBQUN6QyxhQUFPLG1CQUFtQixDQUFDO0tBQzVCLEVBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztDQUMvQyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDcmVhdGVDbGFzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUikge1xyXG4gIGNvbnN0IF8gPSBSLl87XHJcbiAgY29uc3QgUmVhY3QgPSBSLlJlYWN0O1xyXG5cclxuICBjb25zdCBfdmFuaWxsYUNyZWF0ZUNsYXNzID0gUmVhY3QuY3JlYXRlQ2xhc3M7XHJcblxyXG4gIGNvbnN0IF9wYXRjaGVkQ3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiBjcmVhdGVDbGFzcyhzcGVjcykge1xyXG4gICAgXy5kZWZhdWx0cyhzcGVjcywge1xyXG4gICAgICBnZXRGbHV4U3RvcmVTdWJzY3JpcHRpb25zKCkgeyByZXR1cm4ge307IH0sXHJcbiAgICAgIHN0YXRpY3M6IHt9LFxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IGNyZWF0ZWRDbGFzcztcclxuXHJcbiAgICBmdW5jdGlvbiBfX1JlYWN0TmV4dXNTdXJyb2dhdGUoeyBjb250ZXh0LCBwcm9wcywgc3RhdGUgfSkge1xyXG4gICAgICBsZXQgaW5zdGFuY2U7XHJcbiAgICAgIFJlYWN0LndpdGhDb250ZXh0KGNvbnRleHQsICgpID0+IHtcclxuICAgICAgICBzdGF0ZSA9IHN0YXRlIHx8IHt9O1xyXG4gICAgICAgIGxldCBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChjcmVhdGVkQ2xhc3MsIF8ub21pdChwcm9wcywgJ2NoaWxkcmVuJyksIHByb3BzLmNoaWxkcmVuKTtcclxuICAgICAgICBpbnN0YW5jZSA9IFIuaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50KTtcclxuICAgICAgICBfLmV4dGVuZChpbnN0YW5jZSwgeyBjb250ZXh0IH0pO1xyXG4gICAgICAgIGlmKGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSkge1xyXG4gICAgICAgICAgc3RhdGUgPSBfLmV4dGVuZCh7fSwgc3RhdGUsIGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSgpIHx8IHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy5leHRlbmQoaW5zdGFuY2UsIHsgc3RhdGUsIF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuICAgIF8uZXh0ZW5kKHNwZWNzLnN0YXRpY3MsIHsgX19SZWFjdE5leHVzU3Vycm9nYXRlIH0pO1xyXG5cclxuICAgIGNyZWF0ZWRDbGFzcyA9IF92YW5pbGxhQ3JlYXRlQ2xhc3Moc3BlY3MpO1xyXG4gICAgcmV0dXJuIGNyZWF0ZWRDbGFzcztcclxuICB9O1xyXG5cclxuICBfLmV4dGVuZChfcGF0Y2hlZENyZWF0ZUNsYXNzLCB7XHJcbiAgICBwYXRjaENyZWF0ZUNsYXNzKCkge1xyXG4gICAgICBSZWFjdC5jcmVhdGVDbGFzcyA9IF9wYXRjaGVkQ3JlYXRlQ2xhc3M7XHJcbiAgICAgIHJldHVybiBfcGF0Y2hlZENyZWF0ZUNsYXNzO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXN0b3JlQ3JlYXRlQ2xhc3MoKSB7XHJcbiAgICAgIFJlYWN0LmNyZWF0ZWRDbGFzcyA9IF92YW5pbGxhQ3JlYXRlQ2xhc3M7XHJcbiAgICAgIHJldHVybiBfdmFuaWxsYUNyZWF0ZUNsYXNzO1xyXG4gICAgfSxcclxuICB9KTtcclxuXHJcbiAgcmV0dXJuIF9wYXRjaGVkQ3JlYXRlQ2xhc3MucGF0Y2hDcmVhdGVDbGFzcygpO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
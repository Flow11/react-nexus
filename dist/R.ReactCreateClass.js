"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var React = R.React;

  var _vanillaCreateClass = React.createClass;

  var _patchedCreateClass = function createClass(specs) {
    _.defaults(specs, {
      getFluxStoreSubscriptions: function () {
        return {};
      },
      statics: {} });

    var createdClass;

    function __ReactNexusSurrogate(_ref) {
      var context = _ref.context;
      var props = _ref.props;
      var state = _ref.state;
      var instance;
      React.withContext(context, function () {
        state = state || {};
        var element = React.createElement(createdClass, _.omit(props, "children"), props.children);
        instance = R.instantiateReactComponent(element);
        _.extend(instance, { context: context });
        if (instance.getInitialState) {
          state = _.extend({}, state, instance.getInitialState() || {});
        }
        _.extend(instance, { state: state, __ReactNexusSurrogate: __ReactNexusSurrogate });
      });
      return instance;
    }
    _.extend(specs.statics, { __ReactNexusSurrogate: __ReactNexusSurrogate });

    createdClass = _vanillaCreateClass(specs);
    return createdClass;
  };

  _.extend(_patchedCreateClass, {
    patchCreateClass: function () {
      React.createClass = _patchedCreateClass;
      return _patchedCreateClass;
    },

    restoreCreateClass: function () {
      React.createdClass = _vanillaCreateClass;
      return _vanillaCreateClass;
    } });

  return _patchedCreateClass.patchCreateClass();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L3JlYWN0LW5leHVzL3JlYWN0LXJhaWxzL3NyYy9SLlJlYWN0Q3JlYXRlQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXRCLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7QUFFOUMsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDdEQsS0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDaEIsK0JBQXlCLEVBQUEsWUFBRztBQUFFLGVBQU8sRUFBRSxDQUFDO09BQUU7QUFDMUMsYUFBTyxFQUFFLEVBQUUsRUFDWixDQUFDLENBQUM7O0FBRUgsUUFBSSxZQUFZLENBQUM7O0FBRWpCLGFBQVMscUJBQXFCLE9BQTRCO1VBQXpCLE9BQU8sUUFBUCxPQUFPO1VBQUUsS0FBSyxRQUFMLEtBQUs7VUFBRSxLQUFLLFFBQUwsS0FBSztBQUNwRCxVQUFJLFFBQVEsQ0FBQztBQUNiLFdBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFlBQU07QUFDL0IsYUFBSyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDcEIsWUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNGLGdCQUFRLEdBQUcsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELFNBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFQLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDaEMsWUFBRyxRQUFRLENBQUMsZUFBZSxFQUFFO0FBQzNCLGVBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQy9EO0FBQ0QsU0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUwsS0FBSyxFQUFFLHFCQUFxQixFQUFyQixxQkFBcUIsRUFBRSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxRQUFRLENBQUM7S0FDakI7QUFDRCxLQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFBRSxxQkFBcUIsRUFBckIscUJBQXFCLEVBQUUsQ0FBQyxDQUFDOztBQUVuRCxnQkFBWSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLFdBQU8sWUFBWSxDQUFDO0dBQ3JCLENBQUM7O0FBRUYsR0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtBQUM1QixvQkFBZ0IsRUFBQSxZQUFHO0FBQ2pCLFdBQUssQ0FBQyxXQUFXLEdBQUcsbUJBQW1CLENBQUM7QUFDeEMsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7QUFFRCxzQkFBa0IsRUFBQSxZQUFHO0FBQ25CLFdBQUssQ0FBQyxZQUFZLEdBQUcsbUJBQW1CLENBQUM7QUFDekMsYUFBTyxtQkFBbUIsQ0FBQztLQUM1QixFQUNGLENBQUMsQ0FBQzs7QUFFSCxTQUFPLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFLENBQUM7Q0FDL0MsQ0FBQyIsImZpbGUiOiJSLlJlYWN0Q3JlYXRlQ2xhc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCc2dG81L3BvbHlmaWxsJyk7XG5jb25zdCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUikge1xuICBjb25zdCBfID0gUi5fO1xuICBjb25zdCBSZWFjdCA9IFIuUmVhY3Q7XG5cbiAgY29uc3QgX3ZhbmlsbGFDcmVhdGVDbGFzcyA9IFJlYWN0LmNyZWF0ZUNsYXNzO1xuXG4gIGNvbnN0IF9wYXRjaGVkQ3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiBjcmVhdGVDbGFzcyhzcGVjcykge1xuICAgIF8uZGVmYXVsdHMoc3BlY3MsIHtcbiAgICAgIGdldEZsdXhTdG9yZVN1YnNjcmlwdGlvbnMoKSB7IHJldHVybiB7fTsgfSxcbiAgICAgIHN0YXRpY3M6IHt9LFxuICAgIH0pO1xuXG4gICAgbGV0IGNyZWF0ZWRDbGFzcztcblxuICAgIGZ1bmN0aW9uIF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSh7IGNvbnRleHQsIHByb3BzLCBzdGF0ZSB9KSB7XG4gICAgICBsZXQgaW5zdGFuY2U7XG4gICAgICBSZWFjdC53aXRoQ29udGV4dChjb250ZXh0LCAoKSA9PiB7XG4gICAgICAgIHN0YXRlID0gc3RhdGUgfHwge307XG4gICAgICAgIGxldCBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChjcmVhdGVkQ2xhc3MsIF8ub21pdChwcm9wcywgJ2NoaWxkcmVuJyksIHByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgaW5zdGFuY2UgPSBSLmluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCk7XG4gICAgICAgIF8uZXh0ZW5kKGluc3RhbmNlLCB7IGNvbnRleHQgfSk7XG4gICAgICAgIGlmKGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSkge1xuICAgICAgICAgIHN0YXRlID0gXy5leHRlbmQoe30sIHN0YXRlLCBpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUoKSB8fCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgXy5leHRlbmQoaW5zdGFuY2UsIHsgc3RhdGUsIF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICBfLmV4dGVuZChzcGVjcy5zdGF0aWNzLCB7IF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcblxuICAgIGNyZWF0ZWRDbGFzcyA9IF92YW5pbGxhQ3JlYXRlQ2xhc3Moc3BlY3MpO1xuICAgIHJldHVybiBjcmVhdGVkQ2xhc3M7XG4gIH07XG5cbiAgXy5leHRlbmQoX3BhdGNoZWRDcmVhdGVDbGFzcywge1xuICAgIHBhdGNoQ3JlYXRlQ2xhc3MoKSB7XG4gICAgICBSZWFjdC5jcmVhdGVDbGFzcyA9IF9wYXRjaGVkQ3JlYXRlQ2xhc3M7XG4gICAgICByZXR1cm4gX3BhdGNoZWRDcmVhdGVDbGFzcztcbiAgICB9LFxuXG4gICAgcmVzdG9yZUNyZWF0ZUNsYXNzKCkge1xuICAgICAgUmVhY3QuY3JlYXRlZENsYXNzID0gX3ZhbmlsbGFDcmVhdGVDbGFzcztcbiAgICAgIHJldHVybiBfdmFuaWxsYUNyZWF0ZUNsYXNzO1xuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBfcGF0Y2hlZENyZWF0ZUNsYXNzLnBhdGNoQ3JlYXRlQ2xhc3MoKTtcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
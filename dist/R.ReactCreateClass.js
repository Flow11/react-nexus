"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var React = R.React;

  var _vanillaCreateClass = _.scope(React.createClass, React);

  var _patchedCreateClass = function createClass(specs) {
    _.defaults(specs, {
      getFluxStoreSubscriptions: function () {
        return {};
      },
      statics: {} });

    function __ReactNexusSurrogate(_ref) {
      var context = _ref.context;
      var props = _ref.props;
      var state = _ref.state;
      var instance;
      React.withContext(context, function () {
        state = state || {};
        var args = [createdClass, _.omit(props, "children")];
        if (props.children) {
          args.push(props.children);
        }
        var element = React.createElement(args);
        instance = R.instantiateReactComponent(element);
        _.extend(instance, { context: context });
        if (instance.getInitialState) {
          state = _.extend({}, state, instance.getInitialState() || {});
        }
        _.extend(instance, { state: state, __ReactNexusSurrogate: __ReactNexusSurrogate });
      });
      return instance;
    }

    _.extend(specs.statics, { __ReactNexusSurrogate: __ReactNexusSurrogate });
    return _.extend(_vanillaCreateClass(specs), { __ReactNexusSurrogate: __ReactNexusSurrogate });
  };

  _.extend(_patchedCreateClass, {
    patchCreateClass: function () {
      _.extend(React, { createClass: _patchedCreateClass });
      return _patchedCreateClass;
    },

    restoreCreateClass: function () {
      _.extend(React, { createClass: _vanillaCreateClass });
      return _vanillaCreateClass;
    } });

  return _patchedCreateClass.patchCreateClass();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L3JlYWN0LW5leHVzL3JlYWN0LXJhaWxzL3NyYy9SLlJlYWN0Q3JlYXRlQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFdEIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBRTlELE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0FBQ3RELEtBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO0FBQ2hCLCtCQUF5QixFQUFBLFlBQUc7QUFBRSxlQUFPLEVBQUUsQ0FBQztPQUFFO0FBQzFDLGFBQU8sRUFBRSxFQUFFLEVBQ1osQ0FBQyxDQUFDOztBQUVILGFBQVMscUJBQXFCLE9BQTRCO1VBQXpCLE9BQU8sUUFBUCxPQUFPO1VBQUUsS0FBSyxRQUFMLEtBQUs7VUFBRSxLQUFLLFFBQUwsS0FBSztBQUNwRCxVQUFJLFFBQVEsQ0FBQztBQUNiLFdBQUssQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFlBQU07QUFDL0IsYUFBSyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFDcEIsWUFBSSxJQUFJLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQztBQUNyRCxZQUFHLEtBQUssQ0FBQyxRQUFRLEVBQUU7QUFDakIsY0FBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDM0I7QUFDRCxZQUFJLE9BQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hDLGdCQUFRLEdBQUcsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELFNBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFQLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDaEMsWUFBRyxRQUFRLENBQUMsZUFBZSxFQUFFO0FBQzNCLGVBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQy9EO0FBQ0QsU0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUwsS0FBSyxFQUFFLHFCQUFxQixFQUFyQixxQkFBcUIsRUFBRSxDQUFDLENBQUM7T0FDdEQsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxRQUFRLENBQUM7S0FDakI7O0FBRUQsS0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUscUJBQXFCLEVBQXJCLHFCQUFxQixFQUFFLENBQUMsQ0FBQztBQUNuRCxXQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxxQkFBcUIsRUFBckIscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO0dBQ3hFLENBQUM7O0FBRUYsR0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtBQUM1QixvQkFBZ0IsRUFBQSxZQUFHO0FBQ2pCLE9BQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztBQUN0RCxhQUFPLG1CQUFtQixDQUFDO0tBQzVCOztBQUVELHNCQUFrQixFQUFBLFlBQUc7QUFDbkIsT0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELGFBQU8sbUJBQW1CLENBQUM7S0FDNUIsRUFDRixDQUFDLENBQUM7O0FBRUgsU0FBTyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0NBQy9DLENBQUMiLCJmaWxlIjoiUi5SZWFjdENyZWF0ZUNsYXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcclxuICBjb25zdCBfID0gUi5fO1xyXG4gIGNvbnN0IHNob3VsZCA9IFIuc2hvdWxkO1xyXG4gIGNvbnN0IFJlYWN0ID0gUi5SZWFjdDtcclxuXHJcbiAgY29uc3QgX3ZhbmlsbGFDcmVhdGVDbGFzcyA9IF8uc2NvcGUoUmVhY3QuY3JlYXRlQ2xhc3MsIFJlYWN0KTtcclxuXHJcbiAgY29uc3QgX3BhdGNoZWRDcmVhdGVDbGFzcyA9IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKHNwZWNzKSB7XHJcbiAgICBfLmRlZmF1bHRzKHNwZWNzLCB7XHJcbiAgICAgIGdldEZsdXhTdG9yZVN1YnNjcmlwdGlvbnMoKSB7IHJldHVybiB7fTsgfSxcclxuICAgICAgc3RhdGljczoge30sXHJcbiAgICB9KTtcclxuXHJcbiAgICBmdW5jdGlvbiBfX1JlYWN0TmV4dXNTdXJyb2dhdGUoeyBjb250ZXh0LCBwcm9wcywgc3RhdGUgfSkge1xyXG4gICAgICBsZXQgaW5zdGFuY2U7XHJcbiAgICAgIFJlYWN0LndpdGhDb250ZXh0KGNvbnRleHQsICgpID0+IHtcclxuICAgICAgICBzdGF0ZSA9IHN0YXRlIHx8IHt9O1xyXG4gICAgICAgIGxldCBhcmdzID0gW2NyZWF0ZWRDbGFzcywgXy5vbWl0KHByb3BzLCAnY2hpbGRyZW4nKV07XHJcbiAgICAgICAgaWYocHJvcHMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgIGFyZ3MucHVzaChwcm9wcy5jaGlsZHJlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBlbGVtZW50ID0gUmVhY3QuY3JlYXRlRWxlbWVudChhcmdzKTtcclxuICAgICAgICBpbnN0YW5jZSA9IFIuaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChlbGVtZW50KTtcclxuICAgICAgICBfLmV4dGVuZChpbnN0YW5jZSwgeyBjb250ZXh0IH0pO1xyXG4gICAgICAgIGlmKGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSkge1xyXG4gICAgICAgICAgc3RhdGUgPSBfLmV4dGVuZCh7fSwgc3RhdGUsIGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSgpIHx8IHt9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXy5leHRlbmQoaW5zdGFuY2UsIHsgc3RhdGUsIF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBfLmV4dGVuZChzcGVjcy5zdGF0aWNzLCB7IF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcclxuICAgIHJldHVybiBfLmV4dGVuZChfdmFuaWxsYUNyZWF0ZUNsYXNzKHNwZWNzKSwgeyBfX1JlYWN0TmV4dXNTdXJyb2dhdGUgfSk7XHJcbiAgfTtcclxuXHJcbiAgXy5leHRlbmQoX3BhdGNoZWRDcmVhdGVDbGFzcywge1xyXG4gICAgcGF0Y2hDcmVhdGVDbGFzcygpIHtcclxuICAgICAgXy5leHRlbmQoUmVhY3QsIHsgY3JlYXRlQ2xhc3M6IF9wYXRjaGVkQ3JlYXRlQ2xhc3MgfSk7XHJcbiAgICAgIHJldHVybiBfcGF0Y2hlZENyZWF0ZUNsYXNzO1xyXG4gICAgfSxcclxuXHJcbiAgICByZXN0b3JlQ3JlYXRlQ2xhc3MoKSB7XHJcbiAgICAgIF8uZXh0ZW5kKFJlYWN0LCB7IGNyZWF0ZUNsYXNzOiBfdmFuaWxsYUNyZWF0ZUNsYXNzIH0pO1xyXG4gICAgICByZXR1cm4gX3ZhbmlsbGFDcmVhdGVDbGFzcztcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBfcGF0Y2hlZENyZWF0ZUNsYXNzLnBhdGNoQ3JlYXRlQ2xhc3MoKTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
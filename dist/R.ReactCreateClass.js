"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var React = R.React;

  var _vanillaCreateClass = React.createClass;

  var _patchedCreateClass = function createClass(specs) {
    _.defaults(specs, {
      getFluxStoreSubscriptions: function () {
        return {};
      },
      statics: {} });

    var createdClass;

    function __ReactNexusSurrogate(_ref) {
      var context = _ref.context;
      var props = _ref.props;
      var state = _ref.state;

      var instance;
      React.withContext(context, function () {
        state = state || {};
        var element = React.createElement(createdClass, _.omit(props, "children"), props.children);
        instance = R.instantiateReactComponent(element);
        _.extend(instance, { context: context });
        if (instance.getInitialState) {
          state = _.extend({}, state, instance.getInitialState() || {});
        }
        _.extend(instance, { state: state, __ReactNexusSurrogate: __ReactNexusSurrogate });
      });
      return instance;
    }
    _.extend(specs.statics, { __ReactNexusSurrogate: __ReactNexusSurrogate });

    createdClass = _vanillaCreateClass(specs);
    return createdClass;
  };

  _.extend(_patchedCreateClass, {
    patchCreateClass: function () {
      React.createClass = _patchedCreateClass;
      return _patchedCreateClass;
    },

    restoreCreateClass: function () {
      React.createdClass = _vanillaCreateClass;
      return _vanillaCreateClass;
    } });

  return _patchedCreateClass.patchCreateClass();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LW5leHVzL3NyYy9SLlJlYWN0Q3JlYXRlQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7O0FBRXRCLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7QUFFOUMsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLFdBQVcsQ0FBQyxLQUFLLEVBQUU7QUFDdEQsS0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUU7QUFDaEIsK0JBQXlCLEVBQUEsWUFBRztBQUFFLGVBQU8sRUFBRSxDQUFDO09BQUU7QUFDMUMsYUFBTyxFQUFFLEVBQUUsRUFDWixDQUFDLENBQUM7O0FBRUgsUUFBSSxZQUFZLENBQUM7O0FBRWpCLGFBQVMscUJBQXFCLE9BQTRCO1VBQXpCLE9BQU8sUUFBUCxPQUFPO1VBQUUsS0FBSyxRQUFMLEtBQUs7VUFBRSxLQUFLLFFBQUwsS0FBSzs7QUFDcEQsVUFBSSxRQUFRLENBQUM7QUFDYixXQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxZQUFNO0FBQy9CLGFBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO0FBQ3BCLFlBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzRixnQkFBUSxHQUFHLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxTQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBUCxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLFlBQUcsUUFBUSxDQUFDLGVBQWUsRUFBRTtBQUMzQixlQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUMvRDtBQUNELFNBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFMLEtBQUssRUFBRSxxQkFBcUIsRUFBckIscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO09BQ3RELENBQUMsQ0FBQztBQUNILGFBQU8sUUFBUSxDQUFDO0tBQ2pCO0FBQ0QsS0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUscUJBQXFCLEVBQXJCLHFCQUFxQixFQUFFLENBQUMsQ0FBQzs7QUFFbkQsZ0JBQVksR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMxQyxXQUFPLFlBQVksQ0FBQztHQUNyQixDQUFDOztBQUVGLEdBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUU7QUFDNUIsb0JBQWdCLEVBQUEsWUFBRztBQUNqQixXQUFLLENBQUMsV0FBVyxHQUFHLG1CQUFtQixDQUFDO0FBQ3hDLGFBQU8sbUJBQW1CLENBQUM7S0FDNUI7O0FBRUQsc0JBQWtCLEVBQUEsWUFBRztBQUNuQixXQUFLLENBQUMsWUFBWSxHQUFHLG1CQUFtQixDQUFDO0FBQ3pDLGFBQU8sbUJBQW1CLENBQUM7S0FDNUIsRUFDRixDQUFDLENBQUM7O0FBRUgsU0FBTyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0NBQy9DLENBQUMiLCJmaWxlIjoiUi5SZWFjdENyZWF0ZUNsYXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcclxuICBjb25zdCBfID0gUi5fO1xyXG4gIGNvbnN0IFJlYWN0ID0gUi5SZWFjdDtcclxuXHJcbiAgY29uc3QgX3ZhbmlsbGFDcmVhdGVDbGFzcyA9IFJlYWN0LmNyZWF0ZUNsYXNzO1xyXG5cclxuICBjb25zdCBfcGF0Y2hlZENyZWF0ZUNsYXNzID0gZnVuY3Rpb24gY3JlYXRlQ2xhc3Moc3BlY3MpIHtcclxuICAgIF8uZGVmYXVsdHMoc3BlY3MsIHtcclxuICAgICAgZ2V0Rmx1eFN0b3JlU3Vic2NyaXB0aW9ucygpIHsgcmV0dXJuIHt9OyB9LFxyXG4gICAgICBzdGF0aWNzOiB7fSxcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBjcmVhdGVkQ2xhc3M7XHJcblxyXG4gICAgZnVuY3Rpb24gX19SZWFjdE5leHVzU3Vycm9nYXRlKHsgY29udGV4dCwgcHJvcHMsIHN0YXRlIH0pIHtcclxuICAgICAgbGV0IGluc3RhbmNlO1xyXG4gICAgICBSZWFjdC53aXRoQ29udGV4dChjb250ZXh0LCAoKSA9PiB7XHJcbiAgICAgICAgc3RhdGUgPSBzdGF0ZSB8fCB7fTtcclxuICAgICAgICBsZXQgZWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY3JlYXRlZENsYXNzLCBfLm9taXQocHJvcHMsICdjaGlsZHJlbicpLCBwcm9wcy5jaGlsZHJlbik7XHJcbiAgICAgICAgaW5zdGFuY2UgPSBSLmluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoZWxlbWVudCk7XHJcbiAgICAgICAgXy5leHRlbmQoaW5zdGFuY2UsIHsgY29udGV4dCB9KTtcclxuICAgICAgICBpZihpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUpIHtcclxuICAgICAgICAgIHN0YXRlID0gXy5leHRlbmQoe30sIHN0YXRlLCBpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUoKSB8fCB7fSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF8uZXh0ZW5kKGluc3RhbmNlLCB7IHN0YXRlLCBfX1JlYWN0TmV4dXNTdXJyb2dhdGUgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBfLmV4dGVuZChzcGVjcy5zdGF0aWNzLCB7IF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcclxuXHJcbiAgICBjcmVhdGVkQ2xhc3MgPSBfdmFuaWxsYUNyZWF0ZUNsYXNzKHNwZWNzKTtcclxuICAgIHJldHVybiBjcmVhdGVkQ2xhc3M7XHJcbiAgfTtcclxuXHJcbiAgXy5leHRlbmQoX3BhdGNoZWRDcmVhdGVDbGFzcywge1xyXG4gICAgcGF0Y2hDcmVhdGVDbGFzcygpIHtcclxuICAgICAgUmVhY3QuY3JlYXRlQ2xhc3MgPSBfcGF0Y2hlZENyZWF0ZUNsYXNzO1xyXG4gICAgICByZXR1cm4gX3BhdGNoZWRDcmVhdGVDbGFzcztcclxuICAgIH0sXHJcblxyXG4gICAgcmVzdG9yZUNyZWF0ZUNsYXNzKCkge1xyXG4gICAgICBSZWFjdC5jcmVhdGVkQ2xhc3MgPSBfdmFuaWxsYUNyZWF0ZUNsYXNzO1xyXG4gICAgICByZXR1cm4gX3ZhbmlsbGFDcmVhdGVDbGFzcztcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBfcGF0Y2hlZENyZWF0ZUNsYXNzLnBhdGNoQ3JlYXRlQ2xhc3MoKTtcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var React = R.React;

  var _vanillaCreateClass = _.scope(React.createClass, React);

  var _patchedCreateClass = function createClass(specs) {
    _.defaults(specs, {
      getFluxStoreSubscriptions: function () {
        return {};
      },
      statics: {} });

    function __ReactNexusSurrogate(_ref) {
      var context = _ref.context;
      var props = _ref.props;
      var state = _ref.state;

      var instance;
      React.withContext(context, function () {
        state = state || {};
        var args = [createdClass, _.omit(props, "children")];
        if (props.children) {
          args.push(props.children);
        }
        var element = React.createElement(args);
        instance = R.instantiateReactComponent(element);
        _.extend(instance, { context: context });
        if (instance.getInitialState) {
          state = _.extend({}, state, instance.getInitialState() || {});
        }
        _.extend(instance, { state: state, __ReactNexusSurrogate: __ReactNexusSurrogate });
      });
      return instance;
    }

    _.extend(specs.statics, { __ReactNexusSurrogate: __ReactNexusSurrogate });
    return _.extend(_vanillaCreateClass(specs), { __ReactNexusSurrogate: __ReactNexusSurrogate });
  };

  _.extend(_patchedCreateClass, {
    patchCreateClass: function () {
      _.extend(React, { createClass: _patchedCreateClass });
      return _patchedCreateClass;
    },

    restoreCreateClass: function () {
      _.extend(React, { createClass: _vanillaCreateClass });
      return _vanillaCreateClass;
    } });

  return _patchedCreateClass.patchCreateClass();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLlJlYWN0Q3JlYXRlQ2xhc3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDM0IsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNkLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUM7QUFDeEIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7QUFFdEIsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7O0FBRTlELE1BQU0sbUJBQW1CLEdBQUcsU0FBUyxXQUFXLENBQUMsS0FBSyxFQUFFO0FBQ3RELEtBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFO0FBQ2hCLCtCQUF5QixFQUFBLFlBQUc7QUFBRSxlQUFPLEVBQUUsQ0FBQztPQUFFO0FBQzFDLGFBQU8sRUFBRSxFQUFFLEVBQ1osQ0FBQyxDQUFDOztBQUVILGFBQVMscUJBQXFCLE9BQTRCO1VBQXpCLE9BQU8sUUFBUCxPQUFPO1VBQUUsS0FBSyxRQUFMLEtBQUs7VUFBRSxLQUFLLFFBQUwsS0FBSzs7QUFDcEQsVUFBSSxRQUFRLENBQUM7QUFDYixXQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxZQUFNO0FBQy9CLGFBQUssR0FBRyxLQUFLLElBQUksRUFBRSxDQUFDO0FBQ3BCLFlBQUksSUFBSSxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDckQsWUFBRyxLQUFLLENBQUMsUUFBUSxFQUFFO0FBQ2pCLGNBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNCO0FBQ0QsWUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QyxnQkFBUSxHQUFHLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNoRCxTQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBUCxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLFlBQUcsUUFBUSxDQUFDLGVBQWUsRUFBRTtBQUMzQixlQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUMvRDtBQUNELFNBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxFQUFMLEtBQUssRUFBRSxxQkFBcUIsRUFBckIscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO09BQ3RELENBQUMsQ0FBQztBQUNILGFBQU8sUUFBUSxDQUFDO0tBQ2pCOztBQUVELEtBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLHFCQUFxQixFQUFyQixxQkFBcUIsRUFBRSxDQUFDLENBQUM7QUFDbkQsV0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUscUJBQXFCLEVBQXJCLHFCQUFxQixFQUFFLENBQUMsQ0FBQztHQUN4RSxDQUFDOztBQUVGLEdBQUMsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLEVBQUU7QUFDNUIsb0JBQWdCLEVBQUEsWUFBRztBQUNqQixPQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxDQUFDLENBQUM7QUFDdEQsYUFBTyxtQkFBbUIsQ0FBQztLQUM1Qjs7QUFFRCxzQkFBa0IsRUFBQSxZQUFHO0FBQ25CLE9BQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLENBQUMsQ0FBQztBQUN0RCxhQUFPLG1CQUFtQixDQUFDO0tBQzVCLEVBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQU8sbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztDQUMvQyxDQUFDIiwiZmlsZSI6IlIuUmVhY3RDcmVhdGVDbGFzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XG4gIGNvbnN0IF8gPSBSLl87XG4gIGNvbnN0IHNob3VsZCA9IFIuc2hvdWxkO1xuICBjb25zdCBSZWFjdCA9IFIuUmVhY3Q7XG5cbiAgY29uc3QgX3ZhbmlsbGFDcmVhdGVDbGFzcyA9IF8uc2NvcGUoUmVhY3QuY3JlYXRlQ2xhc3MsIFJlYWN0KTtcblxuICBjb25zdCBfcGF0Y2hlZENyZWF0ZUNsYXNzID0gZnVuY3Rpb24gY3JlYXRlQ2xhc3Moc3BlY3MpIHtcbiAgICBfLmRlZmF1bHRzKHNwZWNzLCB7XG4gICAgICBnZXRGbHV4U3RvcmVTdWJzY3JpcHRpb25zKCkgeyByZXR1cm4ge307IH0sXG4gICAgICBzdGF0aWNzOiB7fSxcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSh7IGNvbnRleHQsIHByb3BzLCBzdGF0ZSB9KSB7XG4gICAgICBsZXQgaW5zdGFuY2U7XG4gICAgICBSZWFjdC53aXRoQ29udGV4dChjb250ZXh0LCAoKSA9PiB7XG4gICAgICAgIHN0YXRlID0gc3RhdGUgfHwge307XG4gICAgICAgIGxldCBhcmdzID0gW2NyZWF0ZWRDbGFzcywgXy5vbWl0KHByb3BzLCAnY2hpbGRyZW4nKV07XG4gICAgICAgIGlmKHByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgYXJncy5wdXNoKHByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZWxlbWVudCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoYXJncyk7XG4gICAgICAgIGluc3RhbmNlID0gUi5pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGVsZW1lbnQpO1xuICAgICAgICBfLmV4dGVuZChpbnN0YW5jZSwgeyBjb250ZXh0IH0pO1xuICAgICAgICBpZihpbnN0YW5jZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgICBzdGF0ZSA9IF8uZXh0ZW5kKHt9LCBzdGF0ZSwgaW5zdGFuY2UuZ2V0SW5pdGlhbFN0YXRlKCkgfHwge30pO1xuICAgICAgICB9XG4gICAgICAgIF8uZXh0ZW5kKGluc3RhbmNlLCB7IHN0YXRlLCBfX1JlYWN0TmV4dXNTdXJyb2dhdGUgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBfLmV4dGVuZChzcGVjcy5zdGF0aWNzLCB7IF9fUmVhY3ROZXh1c1N1cnJvZ2F0ZSB9KTtcbiAgICByZXR1cm4gXy5leHRlbmQoX3ZhbmlsbGFDcmVhdGVDbGFzcyhzcGVjcyksIHsgX19SZWFjdE5leHVzU3Vycm9nYXRlIH0pO1xuICB9O1xuXG4gIF8uZXh0ZW5kKF9wYXRjaGVkQ3JlYXRlQ2xhc3MsIHtcbiAgICBwYXRjaENyZWF0ZUNsYXNzKCkge1xuICAgICAgXy5leHRlbmQoUmVhY3QsIHsgY3JlYXRlQ2xhc3M6IF9wYXRjaGVkQ3JlYXRlQ2xhc3MgfSk7XG4gICAgICByZXR1cm4gX3BhdGNoZWRDcmVhdGVDbGFzcztcbiAgICB9LFxuXG4gICAgcmVzdG9yZUNyZWF0ZUNsYXNzKCkge1xuICAgICAgXy5leHRlbmQoUmVhY3QsIHsgY3JlYXRlQ2xhc3M6IF92YW5pbGxhQ3JlYXRlQ2xhc3MgfSk7XG4gICAgICByZXR1cm4gX3ZhbmlsbGFDcmVhdGVDbGFzcztcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gX3BhdGNoZWRDcmVhdGVDbGFzcy5wYXRjaENyZWF0ZUNsYXNzKCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");

  var optionalParam = /\((.*?)\)/g;
  var namedParam = /(\(\?)?:\w+/g;
  var splatParam = /\*\w+/g;
  var escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  /**
  * <p>R.Route provides methods in order to define specifics routes for the Router components</p>
  * @class R.Router
  */
  var Router = function Router() {
    this._routes = {};
  };

  _.extend(Router.prototype, /** @lends R.Router.prototype */{
    _routes: null,
    _default: null,
    /**
    * <p>Sets a route in a pattern, and combines function returning specific data</p>
    * @method route
    * @param {string} pattern The pattern that will be associated with function
    * @param {string} pattern The pattern that will be associated with function
    * @return {object} this
    */
    route: function route(pattern, fn) {
      R.Debug.dev(R.scope(function () {
        if (_.has(this._routes, pattern)) {
          console.warn("R.Router.route(...): route already registered.");
        }
      }, this));
      var regexp = this._routeToRegExp(pattern);
      this._routes[pattern] = {
        regexp: regexp,
        fn: fn };
      return this;
    },
    /**
    * @method routes
    * @param {string} patterns
    * @return {object} this
    */
    routes: function routes(patterns) {
      if (_.isUndefined(patterns)) {
        return this._routes;
      }
      _.each(patterns, R.scope(function (fn, pattern) {
        this.route(pattern, fn);
      }, this));
      return this;
    },
    /**
    * <p> Setting up the default fonction to use for the match Function </p>
    * @method def
    * @param {string} fn
    * @return {object} this
    */
    def: function def(fn) {
      this._default = fn;
      return this;
    },
    /**
    * <p>Determines whether the sentence match with at least one of routes</p>
    * @method match
    * @param {string} fragment The sentence to test
    * @return {object} res The object of the corresponding route
    */
    match: function match(fragment) {
      var res = null;
      _.each(this._routes, R.scope(function (r) {
        var regexp = r.regexp;
        var fn = r.fn;
        if (res !== null) {
          return;
        }
        if (fragment.match(regexp) !== null) {
          var params = this._extractParameters(regexp, fragment);
          params.push(fragment);
          res = fn.apply(null, params);
        }
      }, this));
      if (!res && this._default) {
        res = this._default.call(null, fragment);
      }
      return res;
    },
    /**
    * @method _routeToRegExp
    * @param {object} route
    * @return {object} RegExp
    * @private
    */
    _routeToRegExp: function _routeToRegExp(route) {
      route = route.replace(escapeRegExp, "\\$&").replace(optionalParam, "(?:$1)?").replace(namedParam, function (match, optional) {
        return optional ? match : "([^/?]+)";
      }).replace(splatParam, "([^?]*?)");
      return new RegExp("^" + route + "(?:\\?([\\s\\S]*))?$");
    },
    /**
    * @method _extractParameters
    * @param {object} regexp
    * @param {object} fragment
    * @return {object} param
    * @private
    */
    _extractParameters: function _extractParameters(regexp, fragment) {
      var params = regexp.exec(fragment).slice(1);
      return _.map(params, function (param, i) {
        if (i === params.length - 1) {
          return param || null;
        }
        return param ? decodeURIComponent(param) : null;
      });
    } });

  return Router;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImQ6L3dvcmtzcGFjZV9yZWZhY3Rvci9yZWFjdC1yYWlscy9zcmMvUi5Sb3V0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDekIsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3BDLE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDekIsTUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzFCLE1BQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7QUFFL0IsTUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDO0FBQ2pDLE1BQUksVUFBVSxHQUFHLGNBQWMsQ0FBQztBQUNoQyxNQUFJLFVBQVUsR0FBRyxRQUFRLENBQUM7QUFDMUIsTUFBSSxZQUFZLEdBQUcsMEJBQTBCLENBQUM7Ozs7OztBQU05QyxNQUFJLE1BQU0sR0FBRyxTQUFTLE1BQU0sR0FBRztBQUMzQixRQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztHQUNyQixDQUFDOztBQUVGLEdBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsa0NBQW1DO0FBQ3hELFdBQU8sRUFBRSxJQUFJO0FBQ2IsWUFBUSxFQUFFLElBQUk7Ozs7Ozs7O0FBUWQsU0FBSyxFQUFFLFNBQVMsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUFFLEVBQUU7QUFDL0IsT0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFXO0FBQzNCLFlBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxFQUFFO0FBQzdCLGlCQUFPLENBQUMsSUFBSSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7U0FDbEU7T0FDSixFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDVixVQUFJLE1BQU0sR0FBRyxJ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RSxVQUFTLEtBQUssRUFBRSxDQUFDLEVBQUU7QUFDcEMsWUFBRyxDQUFDLEtBQUssTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7QUFDeEIsaUJBQU8sS0FBSyxJQUFJLElBQUksQ0FBQztTQUN4QjtBQUNELGVBQU8sS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQztPQUNuRCxDQUFDLENBQUM7S0FDTixFQUNKLENBQUMsQ0FBQzs7QUFFSCxTQUFPLE1BQU0sQ0FBQztDQUNqQixDQUFDIiwiZmlsZSI6IlIuUm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcclxuICAgIHZhciBfID0gcmVxdWlyZShcImxvZGFzaFwiKTtcclxuICAgIHZhciBhc3NlcnQgPSByZXF1aXJlKFwiYXNzZXJ0XCIpO1xyXG5cclxuICAgIHZhciBvcHRpb25hbFBhcmFtID0gL1xcKCguKj8pXFwpL2c7XHJcbiAgICB2YXIgbmFtZWRQYXJhbSA9IC8oXFwoXFw/KT86XFx3Ky9nO1xyXG4gICAgdmFyIHNwbGF0UGFyYW0gPSAvXFwqXFx3Ky9nO1xyXG4gICAgdmFyIGVzY2FwZVJlZ0V4cCA9IC9bXFwte31cXFtcXF0rPy4sXFxcXFxcXiR8I1xcc10vZztcclxuXHJcbiAgICAvKipcclxuICAgICogPHA+Ui5Sb3V0ZSBwcm92aWRlcyBtZXRob2RzIGluIG9yZGVyIHRvIGRlZmluZSBzcGVjaWZpY3Mgcm91dGVzIGZvciB0aGUgUm91dGVyIGNvbXBvbmVudHM8L3A+XHJcbiAgICAqIEBjbGFzcyBSLlJvdXRlclxyXG4gICAgKi9cclxuICAgIHZhciBSb3V0ZXIgPSBmdW5jdGlvbiBSb3V0ZXIoKSB7XHJcbiAgICAgICAgdGhpcy5fcm91dGVzID0ge307XHJcbiAgICB9O1xyXG5cclxuICAgIF8uZXh0ZW5kKFJvdXRlci5wcm90b3R5cGUsIC8qKiBAbGVuZHMgUi5Sb3V0ZXIucHJvdG90eXBlICovIHtcclxuICAgICAgICBfcm91dGVzOiBudWxsLFxyXG4gICAgICAgIF9kZWZhdWx0OiBudWxsLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogPHA+U2V0cyBhIHJvdXRlIGluIGEgcGF0dGVybiwgYW5kIGNvbWJpbmVzIGZ1bmN0aW9uIHJldHVybmluZyBzcGVjaWZpYyBkYXRhPC9wPlxyXG4gICAgICAgICogQG1ldGhvZCByb3V0ZVxyXG4gICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdGhhdCB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCBmdW5jdGlvblxyXG4gICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gVGhlIHBhdHRlcm4gdGhhdCB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aCBmdW5jdGlvblxyXG4gICAgICAgICogQHJldHVybiB7b2JqZWN0fSB0aGlzXHJcbiAgICAgICAgKi9cclxuICAgICAgICByb3V0ZTogZnVuY3Rpb24gcm91dGUocGF0dGVybiwgZm4pIHtcclxuICAgICAgICAgICAgUi5EZWJ1Zy5kZXYoUi5zY29wZShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmKF8uaGFzKHRoaXMuX3JvdXRlcywgcGF0dGVybikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJSLlJvdXRlci5yb3V0ZSguLi4pOiByb3V0ZSBhbHJlYWR5IHJlZ2lzdGVyZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgICAgIHZhciByZWdleHAgPSB0aGlzLl9yb3V0ZVRvUmVnRXhwKHBhdHRlcm4pO1xyXG4gICAgICAgICAgICB0aGlzLl9yb3V0ZXNbcGF0dGVybl0gPSB7XHJcbiAgICAgICAgICAgICAgICByZWdleHA6IHJlZ2V4cCxcclxuICAgICAgICAgICAgICAgIGZuOiBmbixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAqIEBtZXRob2Qgcm91dGVzXHJcbiAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybnNcclxuICAgICAgICAqIEByZXR1cm4ge29iamVjdH0gdGhpc1xyXG4gICAgICAgICovXHJcbiAgICAgICAgcm91dGVzOiBmdW5jdGlvbiByb3V0ZXMocGF0dGVybnMpIHtcclxuICAgICAgICAgICAgaWYoXy5pc1VuZGVmaW5lZChwYXR0ZXJucykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb3V0ZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXy5lYWNoKHBhdHRlcm5zLCBSLnNjb3BlKGZ1bmN0aW9uKGZuLCBwYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlKHBhdHRlcm4sIGZuKTtcclxuICAgICAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICogPHA+IFNldHRpbmcgdXAgdGhlIGRlZmF1bHQgZm9uY3Rpb24gdG8gdXNlIGZvciB0aGUgbWF0Y2ggRnVuY3Rpb24gPC9wPlxyXG4gICAgICAgICogQG1ldGhvZCBkZWZcclxuICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmblxyXG4gICAgICAgICogQHJldHVybiB7b2JqZWN0fSB0aGlzXHJcbiAgICAgICAgKi9cclxuICAgICAgICBkZWY6IGZ1bmN0aW9uIGRlZihmbikge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZhdWx0ID0gZm47XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiA8cD5EZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNlbnRlbmNlIG1hdGNoIHdpdGggYXQgbGVhc3Qgb25lIG9mIHJvdXRlczwvcD5cclxuICAgICAgICAqIEBtZXRob2QgbWF0Y2hcclxuICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmcmFnbWVudCBUaGUgc2VudGVuY2UgdG8gdGVzdFxyXG4gICAgICAgICogQHJldHVybiB7b2JqZWN0fSByZXMgVGhlIG9iamVjdCBvZiB0aGUgY29ycmVzcG9uZGluZyByb3V0ZVxyXG4gICAgICAgICovXHJcbiAgICAgICAgbWF0Y2g6IGZ1bmN0aW9uIG1hdGNoKGZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciByZXMgPSBudWxsO1xyXG4gICAgICAgICAgICBfLmVhY2godGhpcy5fcm91dGVzLCBSLnNjb3BlKGZ1bmN0aW9uKHIpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSByLnJlZ2V4cDtcclxuICAgICAgICAgICAgICAgIHZhciBmbiA9IHIuZm47XHJcbiAgICAgICAgICAgICAgICBpZihyZXMgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihmcmFnbWVudC5tYXRjaChyZWdleHApICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHRoaXMuX2V4dHJhY3RQYXJhbWV0ZXJzKHJlZ2V4cCwgZnJhZ21lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGZyYWdtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICByZXMgPSBmbi5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgICAgIGlmKCFyZXMgJiYgdGhpcy5fZGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgcmVzID0gdGhpcy5fZGVmYXVsdC5jYWxsKG51bGwsIGZyYWdtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgKiBAbWV0aG9kIF9yb3V0ZVRvUmVnRXhwXHJcbiAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gcm91dGVcclxuICAgICAgICAqIEByZXR1cm4ge29iamVjdH0gUmVnRXhwXHJcbiAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICovXHJcbiAgICAgICAgX3JvdXRlVG9SZWdFeHA6IGZ1bmN0aW9uIF9yb3V0ZVRvUmVnRXhwKHJvdXRlKSB7XHJcbiAgICAgICAgICAgIHJvdXRlID0gcm91dGUucmVwbGFjZShlc2NhcGVSZWdFeHAsICdcXFxcJCYnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uob3B0aW9uYWxQYXJhbSwgJyg/OiQxKT8nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmFtZWRQYXJhbSwgZnVuY3Rpb24obWF0Y2gsIG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9uYWwgPyBtYXRjaCA6ICcoW14vP10rKSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uoc3BsYXRQYXJhbSwgJyhbXj9dKj8pJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIHJvdXRlICsgJyg/OlxcXFw/KFtcXFxcc1xcXFxTXSopKT8kJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAqIEBtZXRob2QgX2V4dHJhY3RQYXJhbWV0ZXJzXHJcbiAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gcmVnZXhwXHJcbiAgICAgICAgKiBAcGFyYW0ge29iamVjdH0gZnJhZ21lbnRcclxuICAgICAgICAqIEByZXR1cm4ge29iamVjdH0gcGFyYW1cclxuICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgKi9cclxuICAgICAgICBfZXh0cmFjdFBhcmFtZXRlcnM6IGZ1bmN0aW9uIF9leHRyYWN0UGFyYW1ldGVycyhyZWdleHAsIGZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSByZWdleHAuZXhlYyhmcmFnbWVudCkuc2xpY2UoMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBfLm1hcChwYXJhbXMsIGZ1bmN0aW9uKHBhcmFtLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZihpID09PSBwYXJhbXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbSB8fCBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtID8gZGVjb2RlVVJJQ29tcG9uZW50KHBhcmFtKSA6IG51bGw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gUm91dGVyO1xyXG59O1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
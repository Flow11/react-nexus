"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var requestAnimationFrame = require("raf");

  require("setimmediate");

  function clearAnimationFrame(handle) {
    requestAnimationFrame.cancel(handle);
  }

  var Async = {
    ifMounted: function (fn) {
      var _this = this;
      var _arguments = arguments;
      return function () {
        _.dev(function () {
          return _this._AsyncMixin.should.be.ok;
        });
        if (!_this._AsyncMixinHasUnmounted) {
          return fn.apply(_this, _arguments);
        }
      };
    },

    _deferredImmediate: function (fn) {
      var _this2 = this;
      var _arguments2 = arguments;
      return function () {
        var args = _arguments2;
        var id = _.uniqueId("setImmediate");
        var q = setImmediate(function () {
          delete _this2._AsyncMixinQueuedImmediates[id];
          return fn.apply(_this2, args);
        });
        _this2._AsyncMixinQueuedImmediates[id] = q;
        return id;
      };
    },

    _deferredAnimationFrame: function (fn) {
      var _this3 = this;
      var _arguments3 = arguments;
      return function () {
        var args = _arguments3;
        var id = _.uniqueId("setImmediate");
        var q = requestAnimationFrame(function () {
          delete _this3._AsyncMixinQueuedAnimationFrames[id];
          return fn.apply(_this3, _arguments3);
        });
        _this3._AsyncMixinQueuedAnimationFrames[id] = q;
        return id;
      };
    },

    _deferredTimeout: function (delay) {
      var _this4 = this;
      var _arguments4 = arguments;
      return function (fn) {
        return function () {
          var args = _arguments4;
          var id = _.uniqueId("setTimeout");
          var q = setTimeout(function () {
            delete _this4._AsyncMixinQueuedTimeouts[id];
            return fn.apply(_this4, _arguments4);
          }, delay);
          _this4._AsyncMixinQueuedTimeouts[id] = q;
          return q;
        };
      };
    },

    deferred: function (fn, delay) {
      var ifn = R.Async.ifMounted(fn);
      if (!delay) {
        return R.Async._deferredImmediate(ifn);
      } else {
        return R.Async._deferredTimeout(ifn, delay);
      }
    },

    deferredAnimationFrame: function (fn) {
      var ifn = R.Async.ifMounted(fn);
      return R.Async._deferredAnimationFrame(ifn);
    } };

  _.extend(Async, {
    Mixin: {
      _AsyncMixin: true,
      _AsyncMixinHasUnmounted: false,
      _AsyncMixinQueuedTimeouts: null,
      _AsyncMixinQueuedImmediates: null,
      _AsyncMixinQueuedAnimationFrames: null,

      componentWillMountcomponentWillMount: function () {
        this._AsyncMixinQueuedTimeouts = {};
        this._AsyncMixinQueuedImmediates = {};
        this._AsyncMixinQueuedAnimationFrames = {};
      },

      componentWillUnmount: function () {
        _.each(this._AsyncMixinQueuedTimeouts, clearTimeout);
        _.each(this._AsyncMixinQueuedImmediates, clearImmediate);
        _.each(this._AsyncMixinQueuedAnimationFrames, clearAnimationFrame);
        this._AsyncMixinHasUnmounted = true;
      },

      setStateIfMounted: Async.ifMounted(function () {
        this.setState(state);
      }) } });

  return Async;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L3JlYWN0LW5leHVzL3JlYWN0LXJhaWxzL3NyYy9SLkFzeW5jLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQyxFQUFFO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hCLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUU3QyxTQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRXhCLFdBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0FBQ25DLHlCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0Qzs7QUFFRCxNQUFNLEtBQUssR0FBRztBQUNaLGFBQVMsRUFBQSxVQUFDLEVBQUUsRUFBRTs7O0FBQ1osYUFBTyxZQUFNO0FBQ1gsU0FBQyxDQUFDLEdBQUcsQ0FBQztpQkFBTSxNQUFLLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUU7U0FBQSxDQUFDLENBQUM7QUFDM0MsWUFBRyxDQUFDLE1BQUssdUJBQXVCLEVBQUU7QUFDaEMsaUJBQU8sRUFBRSxDQUFDLEtBQUssbUJBQWlCLENBQUM7U0FDbEM7T0FDRixDQUFDO0tBQ0g7O0FBRUQsc0JBQWtCLEVBQUEsVUFBQyxFQUFFLEVBQUU7OztBQUNyQixhQUFPLFlBQU07QUFDWCxZQUFJLElBQUksY0FBWSxDQUFDO0FBQ3JCLFlBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDcEMsWUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLFlBQU07QUFDekIsaUJBQU8sT0FBSywyQkFBMkIsQ0FBQyxF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QUFDO0FBQ3pELFNBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxFQUFFLG1CQUFtQixDQUFDLENBQUM7QUFDbkUsWUFBSSxDQUFDLHVCQUF1QixHQUFHLElBQUksQ0FBQztPQUNyQzs7QUFFRCx1QkFBaUIsRUFBRSxLQUFLLENBQUMsU0FBUyxDQUFDLFlBQVc7QUFBRSxZQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO09BQUUsQ0FBQyxFQUN6RSxFQUNGLENBQUMsQ0FBQzs7QUFFSCxTQUFPLEtBQUssQ0FBQztDQUNkLENBQUMiLCJmaWxlIjoiUi5Bc3luYy5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XHJcbiAgY29uc3QgXyA9IFIuXztcclxuICBjb25zdCBzaG91bGQgPSBSLnNob3VsZDtcclxuICBjb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKCdyYWYnKTtcclxuXHJcbiAgcmVxdWlyZSgnc2V0aW1tZWRpYXRlJyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyQW5pbWF0aW9uRnJhbWUoaGFuZGxlKSB7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuY2FuY2VsKGhhbmRsZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBBc3luYyA9IHtcclxuICAgIGlmTW91bnRlZChmbikge1xyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIF8uZGV2KCgpID0+IHRoaXMuX0FzeW5jTWl4aW4uc2hvdWxkLmJlLm9rKTtcclxuICAgICAgICBpZighdGhpcy5fQXN5bmNNaXhpbkhhc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGVmZXJyZWRJbW1lZGlhdGUoZm4pIHtcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICBsZXQgaWQgPSBfLnVuaXF1ZUlkKCdzZXRJbW1lZGlhdGUnKTtcclxuICAgICAgICBsZXQgcSA9IHNldEltbWVkaWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXNbaWRdO1xyXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRJbW1lZGlhdGVzW2lkXSA9IHE7XHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGVmZXJyZWRBbmltYXRpb25GcmFtZShmbikge1xyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgIGxldCBpZCA9IF8udW5pcXVlSWQoJ3NldEltbWVkaWF0ZScpO1xyXG4gICAgICAgIGxldCBxID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzW2lkXTtcclxuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRBbmltYXRpb25GcmFtZXNbaWRdID0gcTtcclxuICAgICAgICByZXR1cm4gaWQ7XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIF9kZWZlcnJlZFRpbWVvdXQoZGVsYXkpIHtcclxuICAgICAgcmV0dXJuIChmbikgPT4gKCkgPT4ge1xyXG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgIGxldCBpZCA9IF8udW5pcXVlSWQoJ3NldFRpbWVvdXQnKTtcclxuICAgICAgICBsZXQgcSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgZGVsZXRlIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0c1tpZF07XHJcbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICB9LCBkZWxheSk7XHJcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZFRpbWVvdXRzW2lkXSA9IHE7XHJcbiAgICAgICAgcmV0dXJuIHE7XHJcbiAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIGRlZmVycmVkKGZuLCBkZWxheSkge1xyXG4gICAgICBsZXQgaWZuID0gUi5Bc3luYy5pZk1vdW50ZWQoZm4pO1xyXG4gICAgICBpZighZGVsYXkpIHtcclxuICAgICAgICByZXR1cm4gUi5Bc3luYy5fZGVmZXJyZWRJbW1lZGlhdGUoaWZuKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gUi5Bc3luYy5fZGVmZXJyZWRUaW1lb3V0KGlmbiwgZGVsYXkpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGRlZmVycmVkQW5pbWF0aW9uRnJhbWUoZm4pIHtcclxuICAgICAgbGV0IGlmbiA9IFIuQXN5bmMuaWZNb3VudGVkKGZuKTtcclxuICAgICAgcmV0dXJuIFIuQXN5bmMuX2RlZmVycmVkQW5pbWF0aW9uRnJhbWUoaWZuKTtcclxuICAgIH0sXHJcbiAgfTtcclxuXHJcbiAgXy5leHRlbmQoQXN5bmMsIHtcclxuICAgIE1peGluOiB7XHJcbiAgICAgIF9Bc3luY01peGluOiB0cnVlLFxyXG4gICAgICBfQXN5bmNNaXhpbkhhc1VubW91bnRlZDogZmFsc2UsXHJcbiAgICAgIF9Bc3luY01peGluUXVldWVkVGltZW91dHM6IG51bGwsXHJcbiAgICAgIF9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlczogbnVsbCxcclxuICAgICAgX0FzeW5jTWl4aW5RdWV1ZWRBbmltYXRpb25GcmFtZXM6IG51bGwsXHJcblxyXG4gICAgICBjb21wb25lbnRXaWxsTW91bnRjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZFRpbWVvdXRzID0ge307XHJcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzID0ge307XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgICAgICBfLmVhY2godGhpcy5fQXN5bmNNaXhpblF1ZXVlZFRpbWVvdXRzLCBjbGVhclRpbWVvdXQpO1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlcywgY2xlYXJJbW1lZGlhdGUpO1xyXG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzLCBjbGVhckFuaW1hdGlvbkZyYW1lKTtcclxuICAgICAgICB0aGlzLl9Bc3luY01peGluSGFzVW5tb3VudGVkID0gdHJ1ZTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIHNldFN0YXRlSWZNb3VudGVkOiBBc3luYy5pZk1vdW50ZWQoZnVuY3Rpb24oKSB7IHRoaXMuc2V0U3RhdGUoc3RhdGUpOyB9KSxcclxuICAgIH0sXHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBBc3luYztcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var requestAnimationFrame = require("raf");

  require("setimmediate");

  function clearAnimationFrame(handle) {
    requestAnimationFrame.cancel(handle);
  }

  var Async = {
    Mixin: {
      _AsyncMixinHasUnmounted: false,
      _AsyncMixinHasAsyncMixin: true,
      _AsyncMixinQueuedTimeouts: null,
      _AsyncMixinQueuedImmediates: null,
      _AsyncMixinQueuedAnimationFrames: null,

      componentWillMountcomponentWillMount: function () {
        this._AsyncMixinQueuedTimeouts = {};
        this._AsyncMixinQueuedImmediates = {};
        this._AsyncMixinQueuedAnimationFrames = {};
      },

      componentWillUnmount: function () {
        _.each(this._AsyncMixinQueuedTimeouts, clearTimeout);
        _.each(this._AsyncMixinQueuedImmediates, clearImmediate);
        _.each(this._AsyncMixinQueuedAnimationFrames, clearAnimationFrame);
        this._AsyncMixinHasUnmounted = true;
      },

      setStateIfMounted: Async.ifMounted(function () {
        this.setState(state);
      }) },

    ifMounted: function (fn) {
      var _this = this;
      var _arguments = arguments;

      return function () {
        _.dev(function () {
          return _this._AsyncMixinHasAsyncMixin.should.be.ok;
        });
        if (!_this._AsyncMixinHasUnmounted) {
          return fn.apply(_this, _arguments);
        }
      };
    },

    _deferredImmediate: function (fn) {
      var _this2 = this;
      var _arguments2 = arguments;

      return function () {
        var args = _arguments2;
        var id = _.uniqueId("setImmediate");
        var q = setImmediate(function () {
          delete _this2._AsyncMixinQueuedImmediates[id];
          return fn.apply(_this2, args);
        });
        _this2._AsyncMixinQueuedImmediates[id] = q;
        return id;
      };
    },

    _deferredAnimationFrame: function (fn) {
      var _this3 = this;
      var _arguments3 = arguments;

      return function () {
        var args = _arguments3;
        var id = _.uniqueId("setImmediate");
        var q = requestAnimationFrame(function () {
          delete _this3._AsyncMixinQueuedAnimationFrames[id];
          return fn.apply(_this3, _arguments3);
        });
        _this3._AsyncMixinQueuedAnimationFrames[id] = q;
        return id;
      };
    },

    _deferredTimeout: function (delay) {
      var _this4 = this;
      var _arguments4 = arguments;

      return function (fn) {
        return function () {
          var args = _arguments4;
          var id = _.uniqueId("setTimeout");
          var q = setTimeout(function () {
            delete _this4._AsyncMixinQueuedTimeouts[id];
            return fn.apply(_this4, _arguments4);
          }, delay);
          _this4._AsyncMixinQueuedTimeouts[id] = q;
          return q;
        };
      };
    },

    deferred: function (fn, delay) {
      var ifn = R.Async.ifMounted(fn);
      if (!delay) {
        return R.Async._deferredImmediate(ifn);
      } else {
        return R.Async._deferredTimeout(ifn, delay);
      }
    },

    deferredAnimationFrame: function (fn) {
      var ifn = R.Async.ifMounted(fn);
      return R.Async._deferredAnimationFrame(ifn);
    } };

  return Async;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLkFzeW5jLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQyxFQUFFO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hCLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUU3QyxTQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRXhCLFdBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0FBQ25DLHlCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0Qzs7QUFFRCxNQUFNLEtBQUssR0FBRztBQUNaLFNBQUssRUFBRTtBQUNMLDZCQUF1QixFQUFFLEtBQUs7QUFDOUIsOEJBQXdCLEVBQUUsSUFBSTtBQUM5QiwrQkFBeUIsRUFBRSxJQUFJO0FBQy9CLGlDQUEyQixFQUFFLElBQUk7QUFDakMsc0NBQWdDLEVBQUUsSUFBSTs7QUFFdEMsMENBQW9DLEVBQUEsWUFBRztBQUNyQyxZQUFJLENBQUMseUJBQXlCLEdBQUcsRUFBRSxDQUFDO0FBQ3BDLFlBQUksQ0FBQywyQkFBMkIsR0FBRyxFQUFFLENBQUM7QUFDdEMsWUFBSSxDQUFDLGdDQUFnQyxHQUFHLEVBQUUsQ0FBQztPQUM1Qzs7QUFFRCwwQkFBb0IsRUFBQSxZQUFHO0FBQ3JCLFNBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ3JELFNBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLDJCQUEyQixFQUFFLGNBQWMsQ0FB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QUFDLENBQUM7T0FDN0M7S0FDRjs7QUFFRCwwQkFBc0IsRUFBQSxVQUFDLEVBQUUsRUFBRTtBQUN6QixVQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQyxhQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDN0MsRUFDRixDQUFDOztBQUVGLFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQyIsImZpbGUiOiJSLkFzeW5jLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcbiAgY29uc3QgXyA9IFIuXztcbiAgY29uc3Qgc2hvdWxkID0gUi5zaG91bGQ7XG4gIGNvbnN0IHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJlcXVpcmUoJ3JhZicpO1xuXG4gIHJlcXVpcmUoJ3NldGltbWVkaWF0ZScpO1xuXG4gIGZ1bmN0aW9uIGNsZWFyQW5pbWF0aW9uRnJhbWUoaGFuZGxlKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmNhbmNlbChoYW5kbGUpO1xuICB9XG5cbiAgY29uc3QgQXN5bmMgPSB7XG4gICAgTWl4aW46IHtcbiAgICAgIF9Bc3luY01peGluSGFzVW5tb3VudGVkOiBmYWxzZSxcbiAgICAgIF9Bc3luY01peGluSGFzQXN5bmNNaXhpbjogdHJ1ZSxcbiAgICAgIF9Bc3luY01peGluUXVldWVkVGltZW91dHM6IG51bGwsXG4gICAgICBfQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXM6IG51bGwsXG4gICAgICBfQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lczogbnVsbCxcblxuICAgICAgY29tcG9uZW50V2lsbE1vdW50Y29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHMgPSB7fTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lcyA9IHt9O1xuICAgICAgfSxcblxuICAgICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHMsIGNsZWFyVGltZW91dCk7XG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlcywgY2xlYXJJbW1lZGlhdGUpO1xuICAgICAgICBfLmVhY2godGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lcywgY2xlYXJBbmltYXRpb25GcmFtZSk7XG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5IYXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgfSxcblxuICAgICAgc2V0U3RhdGVJZk1vdW50ZWQ6IEFzeW5jLmlmTW91bnRlZChmdW5jdGlvbigpIHsgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7IH0pLFxuICAgIH0sXG5cbiAgICBpZk1vdW50ZWQoZm4pIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIF8uZGV2KCgpID0+IHRoaXMuX0FzeW5jTWl4aW5IYXNBc3luY01peGluLnNob3VsZC5iZS5vayk7XG4gICAgICAgIGlmKCF0aGlzLl9Bc3luY01peGluSGFzVW5tb3VudGVkKSB7XG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSxcblxuICAgIF9kZWZlcnJlZEltbWVkaWF0ZShmbikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxldCBpZCA9IF8udW5pcXVlSWQoJ3NldEltbWVkaWF0ZScpO1xuICAgICAgICBsZXQgcSA9IHNldEltbWVkaWF0ZSgoKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRJbW1lZGlhdGVzW2lkXTtcbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlc1tpZF0gPSBxO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBfZGVmZXJyZWRBbmltYXRpb25GcmFtZShmbikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxldCBpZCA9IF8udW5pcXVlSWQoJ3NldEltbWVkaWF0ZScpO1xuICAgICAgICBsZXQgcSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRBbmltYXRpb25GcmFtZXNbaWRdO1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lc1tpZF0gPSBxO1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBfZGVmZXJyZWRUaW1lb3V0KGRlbGF5KSB7XG4gICAgICByZXR1cm4gKGZuKSA9PiAoKSA9PiB7XG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsZXQgaWQgPSBfLnVuaXF1ZUlkKCdzZXRUaW1lb3V0Jyk7XG4gICAgICAgIGxldCBxID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0c1tpZF07XG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZFRpbWVvdXRzW2lkXSA9IHE7XG4gICAgICAgIHJldHVybiBxO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZGVmZXJyZWQoZm4sIGRlbGF5KSB7XG4gICAgICBsZXQgaWZuID0gUi5Bc3luYy5pZk1vdW50ZWQoZm4pO1xuICAgICAgaWYoIWRlbGF5KSB7XG4gICAgICAgIHJldHVybiBSLkFzeW5jLl9kZWZlcnJlZEltbWVkaWF0ZShpZm4pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBSLkFzeW5jLl9kZWZlcnJlZFRpbWVvdXQoaWZuLCBkZWxheSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIGRlZmVycmVkQW5pbWF0aW9uRnJhbWUoZm4pIHtcbiAgICAgIGxldCBpZm4gPSBSLkFzeW5jLmlmTW91bnRlZChmbik7XG4gICAgICByZXR1cm4gUi5Bc3luYy5fZGVmZXJyZWRBbmltYXRpb25GcmFtZShpZm4pO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIEFzeW5jO1xufTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var requestAnimationFrame = require("raf");

  require("setimmediate");

  function clearAnimationFrame(handle) {
    requestAnimationFrame.cancel(handle);
  }

  var Async = {
    ifMounted: function (fn) {
      var _this = this;
      var _arguments = arguments;

      return function () {
        _.dev(function () {
          return _this._AsyncMixin.should.be.ok;
        });
        if (!_this._AsyncMixinHasUnmounted) {
          return fn.apply(_this, _arguments);
        }
      };
    },

    _deferredImmediate: function (fn) {
      var _this2 = this;
      var _arguments2 = arguments;

      return function () {
        var args = _arguments2;
        var id = _.uniqueId("setImmediate");
        var q = setImmediate(function () {
          delete _this2._AsyncMixinQueuedImmediates[id];
          return fn.apply(_this2, args);
        });
        _this2._AsyncMixinQueuedImmediates[id] = q;
        return id;
      };
    },

    _deferredAnimationFrame: function (fn) {
      var _this3 = this;
      var _arguments3 = arguments;

      return function () {
        var args = _arguments3;
        var id = _.uniqueId("setImmediate");
        var q = requestAnimationFrame(function () {
          delete _this3._AsyncMixinQueuedAnimationFrames[id];
          return fn.apply(_this3, _arguments3);
        });
        _this3._AsyncMixinQueuedAnimationFrames[id] = q;
        return id;
      };
    },

    _deferredTimeout: function (delay) {
      var _this4 = this;
      var _arguments4 = arguments;

      return function (fn) {
        return function () {
          var args = _arguments4;
          var id = _.uniqueId("setTimeout");
          var q = setTimeout(function () {
            delete _this4._AsyncMixinQueuedTimeouts[id];
            return fn.apply(_this4, _arguments4);
          }, delay);
          _this4._AsyncMixinQueuedTimeouts[id] = q;
          return q;
        };
      };
    },

    deferred: function (fn, delay) {
      var ifn = R.Async.ifMounted(fn);
      if (!delay) {
        return R.Async._deferredImmediate(ifn);
      } else {
        return R.Async._deferredTimeout(ifn, delay);
      }
    },

    deferredAnimationFrame: function (fn) {
      var ifn = R.Async.ifMounted(fn);
      return R.Async._deferredAnimationFrame(ifn);
    } };

  _.extend(Async, {
    Mixin: {
      _AsyncMixin: true,
      _AsyncMixinHasUnmounted: false,
      _AsyncMixinQueuedTimeouts: null,
      _AsyncMixinQueuedImmediates: null,
      _AsyncMixinQueuedAnimationFrames: null,

      componentWillMountcomponentWillMount: function () {
        this._AsyncMixinQueuedTimeouts = {};
        this._AsyncMixinQueuedImmediates = {};
        this._AsyncMixinQueuedAnimationFrames = {};
      },

      componentWillUnmount: function () {
        _.each(this._AsyncMixinQueuedTimeouts, clearTimeout);
        _.each(this._AsyncMixinQueuedImmediates, clearImmediate);
        _.each(this._AsyncMixinQueuedAnimationFrames, clearAnimationFrame);
        this._AsyncMixinHasUnmounted = true;
      },

      setStateIfMounted: Async.ifMounted(function () {
        this.setState(state);
      }) } });

  return Async;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLkFzeW5jLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQyxFQUFFO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hCLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUU3QyxTQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRXhCLFdBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0FBQ25DLHlCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0Qzs7QUFFRCxNQUFNLEtBQUssR0FBRztBQUNaLGFBQVMsRUFBQSxVQUFDLEVBQUUsRUFBRTs7OztBQUNaLGFBQU8sWUFBTTtBQUNYLFNBQUMsQ0FBQyxHQUFHLENBQUM7aUJBQU0sTUFBSyxXQUFXLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1NBQUEsQ0FBQyxDQUFDO0FBQzNDLFlBQUcsQ0FBQyxNQUFLLHVCQUF1QixFQUFFO0FBQ2hDLGlCQUFPLEVBQUUsQ0FBQyxLQUFLLG1CQUFpQixDQUFDO1NBQ2xDO09BQ0YsQ0FBQztLQUNIOztBQUVELHNCQUFrQixFQUFBLFVBQUMsRUFBRSxFQUFFOzs7O0FBQ3JCLGFBQU8sWUFBTTtBQUNYLFlBQUksSUFBSSxjQUFZLENBQUM7QUFDckIsWUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNwQyxZQUFJLENBQUMsR0FBRyxZQUFZLENBQUMsWUFBTTtBQUN6QixpQkFBTyxPQUFLLDJC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RSxjQUFjLENBQUMsQ0FBQztBQUN6RCxTQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25FLFlBQUksQ0FBQyx1QkFBdUIsR0FBRyxJQUFJLENBQUM7T0FDckM7O0FBRUQsdUJBQWlCLEVBQUUsS0FBSyxDQUFDLFNBQVMsQ0FBQyxZQUFXO0FBQUUsWUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztPQUFFLENBQUMsRUFDekUsRUFDRixDQUFDLENBQUM7O0FBRUgsU0FBTyxLQUFLLENBQUM7Q0FDZCxDQUFDIiwiZmlsZSI6IlIuQXN5bmMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCc2dG81L3BvbHlmaWxsJyk7XG5jb25zdCBQcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUikge1xuICBjb25zdCBfID0gUi5fO1xuICBjb25zdCBzaG91bGQgPSBSLnNob3VsZDtcbiAgY29uc3QgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gcmVxdWlyZSgncmFmJyk7XG5cbiAgcmVxdWlyZSgnc2V0aW1tZWRpYXRlJyk7XG5cbiAgZnVuY3Rpb24gY2xlYXJBbmltYXRpb25GcmFtZShoYW5kbGUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuY2FuY2VsKGhhbmRsZSk7XG4gIH1cblxuICBjb25zdCBBc3luYyA9IHtcbiAgICBpZk1vdW50ZWQoZm4pIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIF8uZGV2KCgpID0+IHRoaXMuX0FzeW5jTWl4aW4uc2hvdWxkLmJlLm9rKTtcbiAgICAgICAgaWYoIXRoaXMuX0FzeW5jTWl4aW5IYXNVbm1vdW50ZWQpIHtcbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgX2RlZmVycmVkSW1tZWRpYXRlKGZuKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGV0IGlkID0gXy51bmlxdWVJZCgnc2V0SW1tZWRpYXRlJyk7XG4gICAgICAgIGxldCBxID0gc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXNbaWRdO1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRJbW1lZGlhdGVzW2lkXSA9IHE7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIF9kZWZlcnJlZEFuaW1hdGlvbkZyYW1lKGZuKSB7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGV0IGlkID0gXy51bmlxdWVJZCgnc2V0SW1tZWRpYXRlJyk7XG4gICAgICAgIGxldCBxID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lc1tpZF07XG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzW2lkXSA9IHE7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIF9kZWZlcnJlZFRpbWVvdXQoZGVsYXkpIHtcbiAgICAgIHJldHVybiAoZm4pID0+ICgpID0+IHtcbiAgICAgICAgbGV0IGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxldCBpZCA9IF8udW5pcXVlSWQoJ3NldFRpbWVvdXQnKTtcbiAgICAgICAgbGV0IHEgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZFRpbWVvdXRzW2lkXTtcbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHNbaWRdID0gcTtcbiAgICAgICAgcmV0dXJuIHE7XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBkZWZlcnJlZChmbiwgZGVsYXkpIHtcbiAgICAgIGxldCBpZm4gPSBSLkFzeW5jLmlmTW91bnRlZChmbik7XG4gICAgICBpZighZGVsYXkpIHtcbiAgICAgICAgcmV0dXJuIFIuQXN5bmMuX2RlZmVycmVkSW1tZWRpYXRlKGlmbik7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFIuQXN5bmMuX2RlZmVycmVkVGltZW91dChpZm4sIGRlbGF5KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZGVmZXJyZWRBbmltYXRpb25GcmFtZShmbikge1xuICAgICAgbGV0IGlmbiA9IFIuQXN5bmMuaWZNb3VudGVkKGZuKTtcbiAgICAgIHJldHVybiBSLkFzeW5jLl9kZWZlcnJlZEFuaW1hdGlvbkZyYW1lKGlmbik7XG4gICAgfSxcbiAgfTtcblxuICBfLmV4dGVuZChBc3luYywge1xuICAgIE1peGluOiB7XG4gICAgICBfQXN5bmNNaXhpbjogdHJ1ZSxcbiAgICAgIF9Bc3luY01peGluSGFzVW5tb3VudGVkOiBmYWxzZSxcbiAgICAgIF9Bc3luY01peGluUXVldWVkVGltZW91dHM6IG51bGwsXG4gICAgICBfQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXM6IG51bGwsXG4gICAgICBfQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lczogbnVsbCxcblxuICAgICAgY29tcG9uZW50V2lsbE1vdW50Y29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHMgPSB7fTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lcyA9IHt9O1xuICAgICAgfSxcblxuICAgICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHMsIGNsZWFyVGltZW91dCk7XG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlcywgY2xlYXJJbW1lZGlhdGUpO1xuICAgICAgICBfLmVhY2godGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lcywgY2xlYXJBbmltYXRpb25GcmFtZSk7XG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5IYXNVbm1vdW50ZWQgPSB0cnVlO1xuICAgICAgfSxcblxuICAgICAgc2V0U3RhdGVJZk1vdW50ZWQ6IEFzeW5jLmlmTW91bnRlZChmdW5jdGlvbigpIHsgdGhpcy5zZXRTdGF0ZShzdGF0ZSk7IH0pLFxuICAgIH0sXG4gIH0pO1xuXG4gIHJldHVybiBBc3luYztcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var should = R.should;
  var requestAnimationFrame = require("raf");

  require("setimmediate");

  function clearAnimationFrame(handle) {
    requestAnimationFrame.cancel(handle);
  }

  var Async = {
    Mixin: {
      _AsyncMixin: true,
      _AsyncMixinHasUnmounted: false,
      _AsyncMixinQueuedTimeouts: null,
      _AsyncMixinQueuedImmediates: null,
      _AsyncMixinQueuedAnimationFrames: null,

      componentWillMountcomponentWillMount: function () {
        this._AsyncMixinQueuedTimeouts = {};
        this._AsyncMixinQueuedImmediates = {};
        this._AsyncMixinQueuedAnimationFrames = {};
      },

      componentWillUnmount: function () {
        _.each(this._AsyncMixinQueuedTimeouts, clearTimeout);
        _.each(this._AsyncMixinQueuedImmediates, clearImmediate);
        _.each(this._AsyncMixinQueuedAnimationFrames, clearAnimationFrame);
        this._AsyncMixinHasUnmounted = true;
      },

      setStateIfMounted: Async.ifMounted(function () {
        this.setState(state);
      }) },

    ifMounted: function (fn) {
      var _this = this;
      var _arguments = arguments;

      return function () {
        _.dev(function () {
          return _this._AsyncMixin.should.be.ok;
        });
        if (!_this._AsyncMixinHasUnmounted) {
          return fn.apply(_this, _arguments);
        }
      };
    },

    _deferredImmediate: function (fn) {
      var _this2 = this;
      var _arguments2 = arguments;

      return function () {
        var args = _arguments2;
        var id = _.uniqueId("setImmediate");
        var q = setImmediate(function () {
          delete _this2._AsyncMixinQueuedImmediates[id];
          return fn.apply(_this2, args);
        });
        _this2._AsyncMixinQueuedImmediates[id] = q;
        return id;
      };
    },

    _deferredAnimationFrame: function (fn) {
      var _this3 = this;
      var _arguments3 = arguments;

      return function () {
        var args = _arguments3;
        var id = _.uniqueId("setImmediate");
        var q = requestAnimationFrame(function () {
          delete _this3._AsyncMixinQueuedAnimationFrames[id];
          return fn.apply(_this3, _arguments3);
        });
        _this3._AsyncMixinQueuedAnimationFrames[id] = q;
        return id;
      };
    },

    _deferredTimeout: function (delay) {
      var _this4 = this;
      var _arguments4 = arguments;

      return function (fn) {
        return function () {
          var args = _arguments4;
          var id = _.uniqueId("setTimeout");
          var q = setTimeout(function () {
            delete _this4._AsyncMixinQueuedTimeouts[id];
            return fn.apply(_this4, _arguments4);
          }, delay);
          _this4._AsyncMixinQueuedTimeouts[id] = q;
          return q;
        };
      };
    },

    deferred: function (fn, delay) {
      var ifn = R.Async.ifMounted(fn);
      if (!delay) {
        return R.Async._deferredImmediate(ifn);
      } else {
        return R.Async._deferredTimeout(ifn, delay);
      }
    },

    deferredAnimationFrame: function (fn) {
      var ifn = R.Async.ifMounted(fn);
      return R.Async._deferredAnimationFrame(ifn);
    } };

  return Async;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImY6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9SLkFzeW5jLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ3pCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNwQyxNQUFNLENBQUMsT0FBTyxHQUFHLFVBQVMsQ0FBQyxFQUFFO0FBQzNCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDZCxNQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hCLE1BQU0scUJBQXFCLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDOztBQUU3QyxTQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7O0FBRXhCLFdBQVMsbUJBQW1CLENBQUMsTUFBTSxFQUFFO0FBQ25DLHlCQUFxQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztHQUN0Qzs7QUFFRCxNQUFNLEtBQUssR0FBRztBQUNaLFNBQUssRUFBRTtBQUNMLGlCQUFXLEVBQUUsSUFBSTtBQUNqQiw2QkFBdUIsRUFBRSxLQUFLO0FBQzlCLCtCQUF5QixFQUFFLElBQUk7QUFDL0IsaUNBQTJCLEVBQUUsSUFBSTtBQUNqQyxzQ0FBZ0MsRUFBRSxJQUFJOztBQUV0QywwQ0FBb0MsRUFBQSxZQUFHO0FBQ3JDLFlBQUksQ0FBQyx5QkFBeUIsR0FBRyxFQUFFLENBQUM7QUFDcEMsWUFBSSxDQUFDLDJCQUEyQixHQUFHLEVBQUUsQ0FBQztBQUN0QyxZQUFJLENBQUMsZ0NBQWdDLEdBQUcsRUFBRSxDQUFDO09BQzVDOztBQUVELDBCQUFvQixFQUFBLFlBQUc7QUFDckIsU0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDckQsU0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsMkJBQTJCLEVBQUUsY0FBYyxDQUFD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LENBQUM7T0FDN0M7S0FDRjs7QUFFRCwwQkFBc0IsRUFBQSxVQUFDLEVBQUUsRUFBRTtBQUN6QixVQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNoQyxhQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsdUJBQXVCLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDN0MsRUFDRixDQUFDOztBQUVGLFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQyIsImZpbGUiOiJSLkFzeW5jLmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFIpIHtcbiAgY29uc3QgXyA9IFIuXztcbiAgY29uc3Qgc2hvdWxkID0gUi5zaG91bGQ7XG4gIGNvbnN0IHJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJlcXVpcmUoJ3JhZicpO1xuXG4gIHJlcXVpcmUoJ3NldGltbWVkaWF0ZScpO1xuXG4gIGZ1bmN0aW9uIGNsZWFyQW5pbWF0aW9uRnJhbWUoaGFuZGxlKSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLmNhbmNlbChoYW5kbGUpO1xuICB9XG5cbiAgY29uc3QgQXN5bmMgPSB7XG4gICAgTWl4aW46IHtcbiAgICAgIF9Bc3luY01peGluOiB0cnVlLFxuICAgICAgX0FzeW5jTWl4aW5IYXNVbm1vdW50ZWQ6IGZhbHNlLFxuICAgICAgX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0czogbnVsbCxcbiAgICAgIF9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlczogbnVsbCxcbiAgICAgIF9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzOiBudWxsLFxuXG4gICAgICBjb21wb25lbnRXaWxsTW91bnRjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0cyA9IHt9O1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlcyA9IHt9O1xuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzID0ge307XG4gICAgICB9LFxuXG4gICAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgXy5lYWNoKHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0cywgY2xlYXJUaW1lb3V0KTtcbiAgICAgICAgXy5lYWNoKHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRJbW1lZGlhdGVzLCBjbGVhckltbWVkaWF0ZSk7XG4gICAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzLCBjbGVhckFuaW1hdGlvbkZyYW1lKTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpbkhhc1VubW91bnRlZCA9IHRydWU7XG4gICAgICB9LFxuXG4gICAgICBzZXRTdGF0ZUlmTW91bnRlZDogQXN5bmMuaWZNb3VudGVkKGZ1bmN0aW9uKCkgeyB0aGlzLnNldFN0YXRlKHN0YXRlKTsgfSksXG4gICAgfSxcblxuICAgIGlmTW91bnRlZChmbikge1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgXy5kZXYoKCkgPT4gdGhpcy5fQXN5bmNNaXhpbi5zaG91bGQuYmUub2spO1xuICAgICAgICBpZighdGhpcy5fQXN5bmNNaXhpbkhhc1VubW91bnRlZCkge1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBfZGVmZXJyZWRJbW1lZGlhdGUoZm4pIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsZXQgaWQgPSBfLnVuaXF1ZUlkKCdzZXRJbW1lZGlhdGUnKTtcbiAgICAgICAgbGV0IHEgPSBzZXRJbW1lZGlhdGUoKCkgPT4ge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlc1tpZF07XG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXNbaWRdID0gcTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgX2RlZmVycmVkQW5pbWF0aW9uRnJhbWUoZm4pIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBsZXQgaWQgPSBfLnVuaXF1ZUlkKCdzZXRJbW1lZGlhdGUnKTtcbiAgICAgICAgbGV0IHEgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzW2lkXTtcbiAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRBbmltYXRpb25GcmFtZXNbaWRdID0gcTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgICAgfTtcbiAgICB9LFxuXG4gICAgX2RlZmVycmVkVGltZW91dChkZWxheSkge1xuICAgICAgcmV0dXJuIChmbikgPT4gKCkgPT4ge1xuICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgbGV0IGlkID0gXy51bmlxdWVJZCgnc2V0VGltZW91dCcpO1xuICAgICAgICBsZXQgcSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHNbaWRdO1xuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9LCBkZWxheSk7XG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0c1tpZF0gPSBxO1xuICAgICAgICByZXR1cm4gcTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGRlZmVycmVkKGZuLCBkZWxheSkge1xuICAgICAgbGV0IGlmbiA9IFIuQXN5bmMuaWZNb3VudGVkKGZuKTtcbiAgICAgIGlmKCFkZWxheSkge1xuICAgICAgICByZXR1cm4gUi5Bc3luYy5fZGVmZXJyZWRJbW1lZGlhdGUoaWZuKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gUi5Bc3luYy5fZGVmZXJyZWRUaW1lb3V0KGlmbiwgZGVsYXkpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBkZWZlcnJlZEFuaW1hdGlvbkZyYW1lKGZuKSB7XG4gICAgICBsZXQgaWZuID0gUi5Bc3luYy5pZk1vdW50ZWQoZm4pO1xuICAgICAgcmV0dXJuIFIuQXN5bmMuX2RlZmVycmVkQW5pbWF0aW9uRnJhbWUoaWZuKTtcbiAgICB9LFxuICB9O1xuXG4gIHJldHVybiBBc3luYztcbn07XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
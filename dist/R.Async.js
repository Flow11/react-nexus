"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = R._;
  var requestAnimationFrame = require("raf");

  require("setimmediate");

  function clearAnimationFrame(handle) {
    requestAnimationFrame.cancel(handle);
  }

  var Async = {
    ifMounted: function (fn) {
      var _this = this;
      var _arguments = arguments;
      return function () {
        _.dev(function () {
          return _this._AsyncMixin.should.be.ok;
        });
        if (!_this._AsyncMixinHasUnmounted) {
          return fn.apply(_this, _arguments);
        }
      };
    },

    _deferredImmediate: function (fn) {
      var _this2 = this;
      var _arguments2 = arguments;
      return function () {
        var args = _arguments2;
        var id = _.uniqueId("setImmediate");
        var q = setImmediate(function () {
          delete _this2._AsyncMixinQueuedImmediates[id];
          return fn.apply(_this2, args);
        });
        _this2._AsyncMixinQueuedImmediates[id] = q;
        return id;
      };
    },

    _deferredAnimationFrame: function (fn) {
      var _this3 = this;
      var _arguments3 = arguments;
      return function () {
        var args = _arguments3;
        var id = _.uniqueId("setImmediate");
        var q = requestAnimationFrame(function () {
          delete _this3._AsyncMixinQueuedAnimationFrames[id];
          return fn.apply(_this3, args);
        });
        _this3._AsyncMixinQueuedAnimationFrames[id] = q;
        return id;
      };
    },

    _deferredTimeout: function (delay) {
      var _this4 = this;
      var _arguments4 = arguments;
      return function (fn) {
        return function () {
          var args = _arguments4;
          var id = _.uniqueId("setTimeout");
          var q = setTimeout(function () {
            delete _this4._AsyncMixinQueuedTimeouts[id];
            return fn.apply(_this4, args);
          }, delay);
          _this4._AsyncMixinQueuedTimeouts[id] = q;
          return q;
        };
      };
    },

    deferred: function (fn, delay) {
      var ifn = R.Async.ifMounted(fn);
      if (!delay) {
        return R.Async._deferredImmediate(ifn);
      } else {
        return R.Async._deferredTimeout(ifn, delay);
      }
    },

    deferredAnimationFrame: function (fn) {
      var ifn = R.Async.ifMounted(fn);
      return R.Async._deferredAnimationFrame(ifn);
    } };

  Async.Mixin = {
    _AsyncMixin: true,
    _AsyncMixinHasUnmounted: false,
    _AsyncMixinQueuedTimeouts: null,
    _AsyncMixinQueuedImmediates: null,
    _AsyncMixinQueuedAnimationFrames: null,

    componentWillMountcomponentWillMount: function () {
      this._AsyncMixinQueuedTimeouts = {};
      this._AsyncMixinQueuedImmediates = {};
      this._AsyncMixinQueuedAnimationFrames = {};
    },

    componentWillUnmount: function () {
      _.each(this._AsyncMixinQueuedTimeouts, clearTimeout);
      _.each(this._AsyncMixinQueuedImmediates, clearImmediate);
      _.each(this._AsyncMixinQueuedAnimationFrames, clearAnimationFrame);
      this._AsyncMixinHasUnmounted = true;
    },

    setStateIfMounted: Async.ifMounted(function (state) {
      this.setState(state);
    }) };

  return Async;
};
//# sourceMappingURL=data:application/json;base64,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QUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDO0tBQ3JDOztBQUVELHFCQUFpQixFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsVUFBUyxLQUFLLEVBQUU7QUFBRSxVQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQUUsQ0FBQyxFQUM5RSxDQUFDOztBQUVGLFNBQU8sS0FBSyxDQUFDO0NBQ2QsQ0FBQyIsImZpbGUiOiJSLkFzeW5jLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihSKSB7XHJcbiAgY29uc3QgXyA9IFIuXztcclxuICBjb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSByZXF1aXJlKCdyYWYnKTtcclxuXHJcbiAgcmVxdWlyZSgnc2V0aW1tZWRpYXRlJyk7XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyQW5pbWF0aW9uRnJhbWUoaGFuZGxlKSB7XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuY2FuY2VsKGhhbmRsZSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBBc3luYyA9IHtcclxuICAgIGlmTW91bnRlZChmbikge1xyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIF8uZGV2KCgpID0+IHRoaXMuX0FzeW5jTWl4aW4uc2hvdWxkLmJlLm9rKTtcclxuICAgICAgICBpZighdGhpcy5fQXN5bmNNaXhpbkhhc1VubW91bnRlZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGVmZXJyZWRJbW1lZGlhdGUoZm4pIHtcclxuICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICBsZXQgaWQgPSBfLnVuaXF1ZUlkKCdzZXRJbW1lZGlhdGUnKTtcclxuICAgICAgICBsZXQgcSA9IHNldEltbWVkaWF0ZSgoKSA9PiB7XHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZEltbWVkaWF0ZXNbaWRdO1xyXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRJbW1lZGlhdGVzW2lkXSA9IHE7XHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGVmZXJyZWRBbmltYXRpb25GcmFtZShmbikge1xyXG4gICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIGxldCBhcmdzID0gYXJndW1lbnRzO1xyXG4gICAgICAgIGxldCBpZCA9IF8udW5pcXVlSWQoJ3NldEltbWVkaWF0ZScpO1xyXG4gICAgICAgIGxldCBxID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzW2lkXTtcclxuICAgICAgICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzW2lkXSA9IHE7XHJcbiAgICAgICAgcmV0dXJuIGlkO1xyXG4gICAgICB9O1xyXG4gICAgfSxcclxuXHJcbiAgICBfZGVmZXJyZWRUaW1lb3V0KGRlbGF5KSB7XHJcbiAgICAgIHJldHVybiAoZm4pID0+ICgpID0+IHtcclxuICAgICAgICBsZXQgYXJncyA9IGFyZ3VtZW50cztcclxuICAgICAgICBsZXQgaWQgPSBfLnVuaXF1ZUlkKCdzZXRUaW1lb3V0Jyk7XHJcbiAgICAgICAgbGV0IHEgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgIGRlbGV0ZSB0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHNbaWRdO1xyXG4gICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgIH0sIGRlbGF5KTtcclxuICAgICAgICB0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHNbaWRdID0gcTtcclxuICAgICAgICByZXR1cm4gcTtcclxuICAgICAgfTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVmZXJyZWQoZm4sIGRlbGF5KSB7XHJcbiAgICAgIGxldCBpZm4gPSBSLkFzeW5jLmlmTW91bnRlZChmbik7XHJcbiAgICAgIGlmKCFkZWxheSkge1xyXG4gICAgICAgIHJldHVybiBSLkFzeW5jLl9kZWZlcnJlZEltbWVkaWF0ZShpZm4pO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBSLkFzeW5jLl9kZWZlcnJlZFRpbWVvdXQoaWZuLCBkZWxheSk7XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZGVmZXJyZWRBbmltYXRpb25GcmFtZShmbikge1xyXG4gICAgICBsZXQgaWZuID0gUi5Bc3luYy5pZk1vdW50ZWQoZm4pO1xyXG4gICAgICByZXR1cm4gUi5Bc3luYy5fZGVmZXJyZWRBbmltYXRpb25GcmFtZShpZm4pO1xyXG4gICAgfSxcclxuICB9O1xyXG5cclxuICBBc3luYy5NaXhpbiA9IHtcclxuICAgIF9Bc3luY01peGluOiB0cnVlLFxyXG4gICAgX0FzeW5jTWl4aW5IYXNVbm1vdW50ZWQ6IGZhbHNlLFxyXG4gICAgX0FzeW5jTWl4aW5RdWV1ZWRUaW1lb3V0czogbnVsbCxcclxuICAgIF9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlczogbnVsbCxcclxuICAgIF9Bc3luY01peGluUXVldWVkQW5pbWF0aW9uRnJhbWVzOiBudWxsLFxyXG5cclxuICAgIGNvbXBvbmVudFdpbGxNb3VudGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgICAgdGhpcy5fQXN5bmNNaXhpblF1ZXVlZFRpbWVvdXRzID0ge307XHJcbiAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRJbW1lZGlhdGVzID0ge307XHJcbiAgICAgIHRoaXMuX0FzeW5jTWl4aW5RdWV1ZWRBbmltYXRpb25GcmFtZXMgPSB7fTtcclxuICAgIH0sXHJcblxyXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkVGltZW91dHMsIGNsZWFyVGltZW91dCk7XHJcbiAgICAgIF8uZWFjaCh0aGlzLl9Bc3luY01peGluUXVldWVkSW1tZWRpYXRlcywgY2xlYXJJbW1lZGlhdGUpO1xyXG4gICAgICBfLmVhY2godGhpcy5fQXN5bmNNaXhpblF1ZXVlZEFuaW1hdGlvbkZyYW1lcywgY2xlYXJBbmltYXRpb25GcmFtZSk7XHJcbiAgICAgIHRoaXMuX0FzeW5jTWl4aW5IYXNVbm1vdW50ZWQgPSB0cnVlO1xyXG4gICAgfSxcclxuXHJcbiAgICBzZXRTdGF0ZUlmTW91bnRlZDogQXN5bmMuaWZNb3VudGVkKGZ1bmN0aW9uKHN0YXRlKSB7IHRoaXMuc2V0U3RhdGUoc3RhdGUpOyB9KSxcclxuICB9O1xyXG5cclxuICByZXR1cm4gQXN5bmM7XHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var $ = require("./R.$");
var _ = require("lodash-next");
var Animate = require("./R.Animate");
var App = require("./R.App");
var Async = require("./R.Async");
var Client = require("./R.Client");
var Component = require("./R.Component");
var Cordova = require("./R.Cordova");
var Dispatcher = require("./R.Dispatcher");
var EventEmitter = require("./R.EventEmitter");
var Flux = require("./R.Flux");
var Fullscreen = require("./R.Fullscreen");
var History = require("./R.History");
var instantiateReactComponent = require("react/lib/instantiateReactComponent");
var Localize = require("./R.Localize");
var Lock = require("./R.Lock");
var Pure = require("./R.Pure");
var React = require("react");
var ReactChildren = require("./R.ReactChildren");
var ReactCreateClass = require("./R.ReactCreateClass");
var Root = require("./R.Root");
var Router = require("./R.Router");
var should = _.should;
var Store = require("./R.Store");
var Style = require("./R.Style");
var Stylesheet = require("./R.Stylesheet");
var Uplink = require("./R.Uplink");
var Window = require("./R.Window");
var XWindow = require("./R.XWindow");

var R = {};

// Top level dependencies
_.extend(R, { _: _, should: should, React: React, instantiateReactComponent: instantiateReactComponent, Lock: Lock });

// React monkey patches
_.extend(R, {
  ReactChildren: ReactChildren(R),
  ReactCreateClass: ReactCreateClass(R) });

// React Nexus core
_.extend(R, {
  $: $(R),
  Animate: Animate(R),
  App: App(R),
  Aysnc: Async(R),
  Client: Client(R),
  Dispatcher: Dispatcher(R),
  EventEmitter: EventEmitter(R),
  Flux: Flux(R),
  Pure: Pure(R),
  Router: Router(R),
  Store: Store(R) });

// React Nexus components
_.extend(R, {
  Component: Component(R),
  Root: Root(R) });

// React Nexus extensions
_.extend(R, {
  Uplink: Uplink(R) });

// React Nexus standard app plugins
_.extend(R, {
  Plugins: {
    Cordova: Cordova(R),
    Fullscreen: Fullscreen(R),
    History: History(R),
    Localize: Localize(R),
    Window: Window(R),
    XWindow: XWindow(R) } });

module.exports = R;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImM6L1VzZXJzL0VsaWUvZ2l0L3JlYWN0L3JlYWN0LXJhaWxzL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM3QyxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNqRCxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDN0MsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZDLElBQU0seUJBQXlCLEdBQUcsT0FBTyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFDakYsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sSUFBSSxHQUFHLE9B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LENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInJlcXVpcmUoJzZ0bzUvcG9seWZpbGwnKTtcbmNvbnN0IFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuY29uc3QgJCA9IHJlcXVpcmUoJy4vUi4kJyk7XG5jb25zdCBfID0gcmVxdWlyZSgnbG9kYXNoLW5leHQnKTtcbmNvbnN0IEFuaW1hdGUgPSByZXF1aXJlKCcuL1IuQW5pbWF0ZScpO1xuY29uc3QgQXBwID0gcmVxdWlyZSgnLi9SLkFwcCcpO1xuY29uc3QgQXN5bmMgPSByZXF1aXJlKCcuL1IuQXN5bmMnKTtcbmNvbnN0IENsaWVudCA9IHJlcXVpcmUoJy4vUi5DbGllbnQnKTtcbmNvbnN0IENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUi5Db21wb25lbnQnKTtcbmNvbnN0IENvcmRvdmEgPSByZXF1aXJlKCcuL1IuQ29yZG92YScpO1xuY29uc3QgRGlzcGF0Y2hlciA9IHJlcXVpcmUoJy4vUi5EaXNwYXRjaGVyJyk7XG5jb25zdCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1IuRXZlbnRFbWl0dGVyJyk7XG5jb25zdCBGbHV4ID0gcmVxdWlyZSgnLi9SLkZsdXgnKTtcbmNvbnN0IEZ1bGxzY3JlZW4gPSByZXF1aXJlKCcuL1IuRnVsbHNjcmVlbicpO1xuY29uc3QgSGlzdG9yeSA9IHJlcXVpcmUoJy4vUi5IaXN0b3J5Jyk7XG5jb25zdCBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgncmVhY3QvbGliL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbmNvbnN0IExvY2FsaXplID0gcmVxdWlyZSgnLi9SLkxvY2FsaXplJyk7XG5jb25zdCBMb2NrID0gcmVxdWlyZSgnLi9SLkxvY2snKTtcbmNvbnN0IFB1cmUgPSByZXF1aXJlKCcuL1IuUHVyZScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUmVhY3RDaGlsZHJlbiA9IHJlcXVpcmUoJy4vUi5SZWFjdENoaWxkcmVuJyk7XG5jb25zdCBSZWFjdENyZWF0ZUNsYXNzID0gcmVxdWlyZSgnLi9SLlJlYWN0Q3JlYXRlQ2xhc3MnKTtcbmNvbnN0IFJvb3QgPSByZXF1aXJlKCcuL1IuUm9vdCcpO1xuY29uc3QgUm91dGVyID0gcmVxdWlyZSgnLi9SLlJvdXRlcicpO1xuY29uc3Qgc2hvdWxkID0gXy5zaG91bGQ7XG5jb25zdCBTdG9yZSA9IHJlcXVpcmUoJy4vUi5TdG9yZScpO1xuY29uc3QgU3R5bGUgPSByZXF1aXJlKCcuL1IuU3R5bGUnKTtcbmNvbnN0IFN0eWxlc2hlZXQgPSByZXF1aXJlKCcuL1IuU3R5bGVzaGVldCcpO1xuY29uc3QgVXBsaW5rID0gcmVxdWlyZSgnLi9SLlVwbGluaycpO1xuY29uc3QgV2luZG93ID0gcmVxdWlyZSgnLi9SLldpbmRvdycpO1xuY29uc3QgWFdpbmRvdyA9IHJlcXVpcmUoJy4vUi5YV2luZG93Jyk7XG5cbmNvbnN0IFIgPSB7fTtcblxuLy8gVG9wIGxldmVsIGRlcGVuZGVuY2llc1xuXy5leHRlbmQoUiwgeyBfLCBzaG91bGQsIFJlYWN0LCBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50LCBMb2NrIH0pO1xuXG4vLyBSZWFjdCBtb25rZXkgcGF0Y2hlc1xuXy5leHRlbmQoUiwge1xuICBSZWFjdENoaWxkcmVuOiBSZWFjdENoaWxkcmVuKFIpLFxuICBSZWFjdENyZWF0ZUNsYXNzOiBSZWFjdENyZWF0ZUNsYXNzKFIpLFxufSk7XG5cbi8vIFJlYWN0IE5leHVzIGNvcmVcbl8uZXh0ZW5kKFIsIHtcbiAgJDogJChSKSxcbiAgQW5pbWF0ZTogQW5pbWF0ZShSKSxcbiAgQXBwOiBBcHAoUiksXG4gIEF5c25jOiBBc3luYyhSKSxcbiAgQ2xpZW50OiBDbGllbnQoUiksXG4gIERpc3BhdGNoZXI6IERpc3BhdGNoZXIoUiksXG4gIEV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyKFIpLFxuICBGbHV4OiBGbHV4KFIpLFxuICBQdXJlOiBQdXJlKFIpLFxuICBSb3V0ZXI6IFJvdXRlcihSKSxcbiAgU3RvcmU6IFN0b3JlKFIpLFxufSk7XG5cbi8vIFJlYWN0IE5leHVzIGNvbXBvbmVudHNcbl8uZXh0ZW5kKFIsIHtcbiAgQ29tcG9uZW50OiBDb21wb25lbnQoUiksXG4gIFJvb3Q6IFJvb3QoUiksXG59KTtcblxuLy8gUmVhY3QgTmV4dXMgZXh0ZW5zaW9uc1xuXy5leHRlbmQoUiwge1xuICBVcGxpbms6IFVwbGluayhSKSxcbn0pO1xuXG4vLyBSZWFjdCBOZXh1cyBzdGFuZGFyZCBhcHAgcGx1Z2luc1xuXy5leHRlbmQoUiwge1xuICBQbHVnaW5zOiB7XG4gICAgQ29yZG92YTogQ29yZG92YShSKSxcbiAgICBGdWxsc2NyZWVuOiBGdWxsc2NyZWVuKFIpLFxuICAgIEhpc3Rvcnk6IEhpc3RvcnkoUiksXG4gICAgTG9jYWxpemU6IExvY2FsaXplKFIpLFxuICAgIFdpbmRvdzogV2luZG93KFIpLFxuICAgIFhXaW5kb3c6IFhXaW5kb3coUiksXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
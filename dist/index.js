"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
var $ = require("./R.$");
var _ = require("lodash-next");
var Animate = require("./R.Animate");
var App = require("./R.App");
var Async = require("./R.Async");
var Client = require("./R.Client");
var Component = require("./R.Component");
var Cordova = require("./R.Cordova");
var Dispatcher = require("./R.Dispatcher");
var EventEmitter = require("./R.EventEmitter");
var Flux = require("./R.Flux");
var Fullscreen = require("./R.Fullscreen");
var History = require("./R.History");
var instantiateReactComponent = require("react/lib/instantiateReactComponent");
var Localize = require("./R.Localize");
var Lock = require("./R.Lock");
var Pure = require("./R.Pure");
var React = require("react");
var ReactChildren = require("./R.ReactChildren");
var ReactCreateClass = require("./R.ReactCreateClass");
var Root = require("./R.Root");
var Router = require("nexus-router");
var should = _.should;
var Store = require("./R.Store");
var Window = require("./R.Window");
var XWindow = require("./R.XWindow");

var R = {};

// Top level dependencies
_.extend(R, { _: _, should: should, React: React, instantiateReactComponent: instantiateReactComponent, Lock: Lock, Router: Router });

// React monkey patches
_.extend(R, {
  ReactChildren: ReactChildren(R),
  ReactCreateClass: ReactCreateClass(R) });

// React Nexus core
_.extend(R, {
  $: $(R),
  Animate: Animate(R),
  App: App(R),
  Aysnc: Async(R),
  Client: Client(R),
  Dispatcher: Dispatcher(R),
  EventEmitter: EventEmitter(R),
  Flux: Flux(R),
  Pure: Pure(R),
  Store: Store(R) });

// React Nexus components
_.extend(R, {
  Component: Component(R),
  Root: Root(R) });

// React Nexus standard app plugins
_.extend(R, {
  Plugins: {
    Cordova: Cordova(R),
    Fullscreen: Fullscreen(R),
    History: History(R),
    Localize: Localize(R),
    Window: Window(R),
    XWindow: XWindow(R) } });

module.exports = R;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImc6L3JlYWN0LW5leHVzL3JlYWN0LXJhaWxzL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUN6QixJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDcEMsSUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzNCLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNqQyxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdkMsSUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQy9CLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzNDLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxJQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM3QyxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUNqRCxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDN0MsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3ZDLElBQU0seUJBQXlCLEdBQUcsT0FBTyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7QUFDakYsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3pDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNqQyxJQUFNLElBQUksR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDakMsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLElBQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0FBQ25ELElBQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDekQsSUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUN2QyxJQUFNLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ3hCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNuQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDckMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDOztBQUV2QyxJQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7OztBQUdiLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFELENBQUMsRUFBRSxNQUFNLEVBQU4sTUFBTSxFQUFFLEtBQUssRUFBTCxLQUFLLEVBQUUseUJBQXlCLEVBQXpCLHlCQUF5QixFQUFFLElBQUksRUFBSixJQUFJLEVBQUUsTUFBTSxFQUFOLE1BQU0sRUFBRSxDQUFDLENBQUM7OztBQUczRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtBQUNWLGVBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0FBQy9CLGtCQUFnQixFQUFFLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxFQUN0QyxDQUFDLENBQUM7OztBQUdILENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFO0FBQ1YsR0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDUCxTQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNuQixLQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNYLE9BQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2YsUUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDakIsWUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7QUFDekIsY0FBWSxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7QUFDN0IsTUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDYixNQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNiLE9BQUssRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ2hCLENBQUMsQ0FBQzs7OztBQUlEO0FBQ0EsaUJBQ0QsQ0FBQyxDQUFDOzs7QUFHSCxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTtBQUNWLFNBQU8sRUFBRTtBQUNQLFdBQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ25CLGNBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLFdBQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ25CLFlBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLFVBQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLFdBQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQ3BCLEVBQ0YsQ0FBQyxDQUFDOztBQUVILE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsicmVxdWlyZSgnNnRvNS9wb2x5ZmlsbCcpO1xuY29uc3QgUHJvbWlzZSA9IHJlcXVpcmUoJ2JsdWViaXJkJyk7XG5jb25zdCAkID0gcmVxdWlyZSgnLi9SLiQnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gtbmV4dCcpO1xuY29uc3QgQW5pbWF0ZSA9IHJlcXVpcmUoJy4vUi5BbmltYXRlJyk7XG5jb25zdCBBcHAgPSByZXF1aXJlKCcuL1IuQXBwJyk7XG5jb25zdCBBc3luYyA9IHJlcXVpcmUoJy4vUi5Bc3luYycpO1xuY29uc3QgQ2xpZW50ID0gcmVxdWlyZSgnLi9SLkNsaWVudCcpO1xuY29uc3QgQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SLkNvbXBvbmVudCcpO1xuY29uc3QgQ29yZG92YSA9IHJlcXVpcmUoJy4vUi5Db3Jkb3ZhJyk7XG5jb25zdCBEaXNwYXRjaGVyID0gcmVxdWlyZSgnLi9SLkRpc3BhdGNoZXInKTtcbmNvbnN0IEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJy4vUi5FdmVudEVtaXR0ZXInKTtcbmNvbnN0IEZsdXggPSByZXF1aXJlKCcuL1IuRmx1eCcpO1xuY29uc3QgRnVsbHNjcmVlbiA9IHJlcXVpcmUoJy4vUi5GdWxsc2NyZWVuJyk7XG5jb25zdCBIaXN0b3J5ID0gcmVxdWlyZSgnLi9SLkhpc3RvcnknKTtcbmNvbnN0IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCdyZWFjdC9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCcpO1xuY29uc3QgTG9jYWxpemUgPSByZXF1aXJlKCcuL1IuTG9jYWxpemUnKTtcbmNvbnN0IExvY2sgPSByZXF1aXJlKCcuL1IuTG9jaycpO1xuY29uc3QgUHVyZSA9IHJlcXVpcmUoJy4vUi5QdXJlJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBSZWFjdENoaWxkcmVuID0gcmVxdWlyZSgnLi9SLlJlYWN0Q2hpbGRyZW4nKTtcbmNvbnN0IFJlYWN0Q3JlYXRlQ2xhc3MgPSByZXF1aXJlKCcuL1IuUmVhY3RDcmVhdGVDbGFzcycpO1xuY29uc3QgUm9vdCA9IHJlcXVpcmUoJy4vUi5Sb290Jyk7XG5jb25zdCBSb3V0ZXIgPSByZXF1aXJlKCduZXh1cy1yb3V0ZXInKTtcbmNvbnN0IHNob3VsZCA9IF8uc2hvdWxkO1xuY29uc3QgU3RvcmUgPSByZXF1aXJlKCcuL1IuU3RvcmUnKTtcbmNvbnN0IFdpbmRvdyA9IHJlcXVpcmUoJy4vUi5XaW5kb3cnKTtcbmNvbnN0IFhXaW5kb3cgPSByZXF1aXJlKCcuL1IuWFdpbmRvdycpO1xuXG5jb25zdCBSID0ge307XG5cbi8vIFRvcCBsZXZlbCBkZXBlbmRlbmNpZXNcbl8uZXh0ZW5kKFIsIHsgXywgc2hvdWxkLCBSZWFjdCwgaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCwgTG9jaywgUm91dGVyIH0pO1xuXG4vLyBSZWFjdCBtb25rZXkgcGF0Y2hlc1xuXy5leHRlbmQoUiwge1xuICBSZWFjdENoaWxkcmVuOiBSZWFjdENoaWxkcmVuKFIpLFxuICBSZWFjdENyZWF0ZUNsYXNzOiBSZWFjdENyZWF0ZUNsYXNzKFIpLFxufSk7XG5cbi8vIFJlYWN0IE5leHVzIGNvcmVcbl8uZXh0ZW5kKFIsIHtcbiAgJDogJChSKSxcbiAgQW5pbWF0ZTogQW5pbWF0ZShSKSxcbiAgQXBwOiBBcHAoUiksXG4gIEF5c25jOiBBc3luYyhSKSxcbiAgQ2xpZW50OiBDbGllbnQoUiksXG4gIERpc3BhdGNoZXI6IERpc3BhdGNoZXIoUiksXG4gIEV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyKFIpLFxuICBGbHV4OiBGbHV4KFIpLFxuICBQdXJlOiBQdXJlKFIpLFxuICBTdG9yZTogU3RvcmUoUiksXG59KTtcblxuLy8gUmVhY3QgTmV4dXMgY29tcG9uZW50c1xuXy5leHRlbmQoUiwge1xuICBDb21wb25lbnQ6IENvbXBvbmVudChSKSxcbiAgUm9vdDogUm9vdChSKSxcbn0pO1xuXG4vLyBSZWFjdCBOZXh1cyBzdGFuZGFyZCBhcHAgcGx1Z2luc1xuXy5leHRlbmQoUiwge1xuICBQbHVnaW5zOiB7XG4gICAgQ29yZG92YTogQ29yZG92YShSKSxcbiAgICBGdWxsc2NyZWVuOiBGdWxsc2NyZWVuKFIpLFxuICAgIEhpc3Rvcnk6IEhpc3RvcnkoUiksXG4gICAgTG9jYWxpemU6IExvY2FsaXplKFIpLFxuICAgIFdpbmRvdzogV2luZG93KFIpLFxuICAgIFhXaW5kb3c6IFhXaW5kb3coUiksXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
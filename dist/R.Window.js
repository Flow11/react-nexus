"use strict";

require("6to5/polyfill");
var Promise = require("bluebird");
module.exports = function (R) {
  var _ = require("lodash");
  var assert = require("assert");

  var defaultParams = {
    width: 1280,
    height: 720,
    scrollTop: 0,
    scrollLeft: 0 };

  var Window = {
    createPlugin: function (storeName, dispatcherName, eventEmitterName, params) {
      params = params || {};
      _.defaults(params, defaultParams);
      return R.App.createPlugin({
        displayName: "Window",
        installInClient: function (flux, window) {
          var _this = this;

          flux.getDispatcher(dispatcherName).addActionListener("/Window/scrollTo", function (params) {
            return _.copromise(regeneratorRuntime.mark(function callee$4$0() {
              return regeneratorRuntime.wrap(function callee$4$0$(context$5$0) {
                while (1) switch (context$5$0.prev = context$5$0.next) {case 0:

                    _.dev(function () {
                      return params.should.be.an.Object && params.top.should.be.ok && params.top.should.be.a.Number && params.left.should.be.ok && params.left.should.be.a.Number;
                    });
                    window.scrollTo(params.top, params.left);
                    context$5$0.next = 4;
                    return _.defer;

                  case 4:
                  case "end": return context$5$0.stop();
                }
              }, callee$4$0, this);
            }), _this);
          });
          window.addEventListener("scroll", function () {
            flux.getStore(storeName).set("/Window/scrollTop", window.scrollTop);
            flux.getStore(storeName).set("/Window/scrollLeft", window.scrollLeft);
            flux.getEventEmitter(eventEmitterName).emit("/Window/scroll", {
              scrollTop: window.scrollTop,
              scrollLeft: window.scrollLeft });
          });
          window.addEventListener("resize", function () {
            flux.getStore(storeName).set("/Window/height", window.innerHeight);
            flux.getStore(storeName).set("/Window/width", window.innerWidth);
            flux.getEventEmitter(eventEmitterName).emit("/Window/resize", {
              height: window.innerHeight,
              width: window.innerWidth });
          });
          flux.getStore(storeName).set("/Window/height", window.innerHeight);
          flux.getStore(storeName).set("/Window/width", window.innerWidth);
          flux.getStore(storeName).set("/Window/scrollTop", window.scrollTop);
          flux.getStore(storeName).set("/Window/scrollLeft", window.scrollLeft);
        },
        installInServer: function (flux, req) {
          flux.getStore(storeName).set("/Window/height", params.height);
          flux.getStore(storeName).set("/Window/width", params.width);
          flux.getStore(storeName).set("/Window/scrollTop", params.scrollTop);
          flux.getStore(storeName).set("/Window/scrollLeft", params.scrollLeft);
        } });
    } };

  return Window;
};
//# sourceMappingURL=data:application/json;base64,